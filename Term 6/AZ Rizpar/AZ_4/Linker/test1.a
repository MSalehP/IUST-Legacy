;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// Declare your global variables here
;
;unsigned char TensHour = 2;
;unsigned char OnesHour = 3;
;unsigned char TensMin = 5;
;unsigned char OnesMin = 8;
;unsigned char TensSec = 0;
;unsigned char OnesSec = 0;
;unsigned char DP = 0x80;
;
;int ParseToHex(char x){
; 0000 000E int ParseToHex(char x){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 000F switch (x)
;PCODE: $0000000F VOL: 0
;	x -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0010    {
; 0000 0011         case 1: return 0x06;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0012                break;
;PCODE: $00000017 VOL: 0
; 0000 0013        case 2: return 0x5b;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0014                 break;
;PCODE: $0000001E VOL: 0
; 0000 0015        case 3: return 0x4F;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0016                break;
;PCODE: $00000025 VOL: 0
; 0000 0017        case 4:return 0x66;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0018                 break;
;PCODE: $0000002C VOL: 0
; 0000 0019        case 5: return 0x6D;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 001A                break;
;PCODE: $00000033 VOL: 0
; 0000 001B        case 6: return 0x7D;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 001C                 break;
;PCODE: $0000003A VOL: 0
; 0000 001D        case 7: return 0x07;
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 001E                break;
;PCODE: $00000041 VOL: 0
; 0000 001F         case 8: return 0x7F;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0020                break;
;PCODE: $00000048 VOL: 0
; 0000 0021        case 9: return 0x6F;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0022                 break;
;PCODE: $0000004F VOL: 0
; 0000 0023        default:return 0x3F;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0024                 break;
;PCODE: $00000054 VOL: 0
; 0000 0025    }
;PCODE: $00000055 VOL: 0
; 0000 0026 }
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;// Timer1
;unsigned char a = 1;
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)
; 0000 002B {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 002C // Place your code here
; 0000 002D a = a << 1;
;PCODE: $0000005B VOL: 0
; 0000 002E if(a==0) a= 1;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 002F 
; 0000 0030   OnesSec=OnesSec+1;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0031   if(OnesSec % 2 != 0)
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0032   {
; 0000 0033         DP = 0x00;
;PCODE: $00000068 VOL: 0
; 0000 0034   }
; 0000 0035   else
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0036    {
; 0000 0037     DP = 0x80;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0038    }
;PCODE: $0000006D VOL: 0
; 0000 0039 
; 0000 003A   if(OnesSec==10)
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 003B    {
; 0000 003C         OnesSec=0;
;PCODE: $00000071 VOL: 0
; 0000 003D         TensSec=TensSec+1;
;PCODE: $00000072 VOL: 0
; 0000 003E   }
; 0000 003F   if(TensSec==6)
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0040   {
; 0000 0041      TensSec=0;
;PCODE: $00000077 VOL: 0
; 0000 0042      OnesMin=OnesMin+1;
;PCODE: $00000078 VOL: 0
; 0000 0043   }
; 0000 0044    if(OnesMin==10)
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0045    {
; 0000 0046 
; 0000 0047       OnesMin=0;
;PCODE: $0000007D VOL: 0
; 0000 0048       TensMin=TensMin+1;
;PCODE: $0000007E VOL: 0
; 0000 0049    }
; 0000 004A    if( TensMin==6)
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 004B    {
; 0000 004C         TensMin=0;
;PCODE: $00000083 VOL: 0
; 0000 004D         OnesHour=OnesHour+1;
;PCODE: $00000084 VOL: 0
; 0000 004E    }
; 0000 004F    if(OnesHour==10)
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0050    {
; 0000 0051        OnesHour=0;
;PCODE: $00000089 VOL: 0
; 0000 0052        TensHour=TensHour+1;
;PCODE: $0000008A VOL: 0
; 0000 0053    }
; 0000 0054    if(TensHour==2 && OnesHour==4)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0055    {
; 0000 0056         OnesHour=0;
;PCODE: $00000096 VOL: 0
; 0000 0057         TensHour=0;
;PCODE: $00000097 VOL: 0
; 0000 0058    }
; 0000 0059 
; 0000 005A 
; 0000 005B }
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;
;void main(void)
; 0000 005E {
;PCODE: $0000009C VOL: 0
; 0000 005F // Declare your local variables here
; 0000 0060 
; 0000 0061 // Input/Output Ports initialization
; 0000 0062 // Port A initialization
; 0000 0063 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
; 0000 0064 DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 0065 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
; 0000 0066 PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0067 
; 0000 0068 // Port B initialization
; 0000 0069 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 006A DDRB=(1<<DDB7) | (1<<DDB6) | (1<<DDB5) | (1<<DDB4) | (1<<DDB3) | (1<<DDB2) | (1<<DDB1) | (1<<DDB0);
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 006B // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 006C PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 006D 
; 0000 006E // Port C initialization
; 0000 006F // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0070 DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0071 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0072 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0073 
; 0000 0074 // Port D initialization
; 0000 0075 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0076 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 0077 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0078 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 0079 
; 0000 007A // Timer/Counter 0 initialization
; 0000 007B // Clock source: System Clock
; 0000 007C // Clock value: Timer 0 Stopped
; 0000 007D // Mode: Normal top=0xFF
; 0000 007E // OC0 output: Disconnected
; 0000 007F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0080 TCNT0=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0081 OCR0=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0082 
; 0000 0083 // Timer/Counter 1 initialization
; 0000 0084 // Clock source: System Clock
; 0000 0085 // Clock value: 31.250 kHz
; 0000 0086 // Mode: CTC top=OCR1A
; 0000 0087 // OC1A output: Disconnected
; 0000 0088 // OC1B output: Disconnected
; 0000 0089 // Noise Canceler: Off
; 0000 008A // Input Capture on Falling Edge
; 0000 008B // Timer Period: 1 s
; 0000 008C // Timer1 Overflow Interrupt: Off
; 0000 008D // Input Capture Interrupt: Off
; 0000 008E // Compare A Match Interrupt: On
; 0000 008F // Compare B Match Interrupt: Off
; 0000 0090 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0091 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0092 TCNT1H=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0093 TCNT1L=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0094 ICR1H=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0095 ICR1L=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0096 OCR1AH=0x7A;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0097 OCR1AL=0x12;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0098 OCR1BH=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0099 OCR1BL=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 009A 
; 0000 009B // Timer/Counter 2 initialization
; 0000 009C // Clock source: System Clock
; 0000 009D // Clock value: Timer2 Stopped
; 0000 009E // Mode: Normal top=0xFF
; 0000 009F // OC2 output: Disconnected
; 0000 00A0 ASSR=0<<AS2;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00A1 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00A2 TCNT2=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00A3 OCR2=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00A4 
; 0000 00A5 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A6 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (1<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00A7 
; 0000 00A8 // External Interrupt(s) initialization
; 0000 00A9 // INT0: Off
; 0000 00AA // INT1: Off
; 0000 00AB // INT2: Off
; 0000 00AC MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00AD MCUCSR=(0<<ISC2);
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00AE 
; 0000 00AF // USART initialization
; 0000 00B0 // USART disabled
; 0000 00B1 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (0<<RXEN) | (0<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00B2 
; 0000 00B3 // Analog Comparator initialization
; 0000 00B4 // Analog Comparator: Off
; 0000 00B5 // The Analog Comparator's positive input is
; 0000 00B6 // connected to the AIN0 pin
; 0000 00B7 // The Analog Comparator's negative input is
; 0000 00B8 // connected to the AIN1 pin
; 0000 00B9 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00BA SFIOR=(0<<ACME);
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00BB 
; 0000 00BC // ADC initialization
; 0000 00BD // ADC disabled
; 0000 00BE ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00BF 
; 0000 00C0 // SPI initialization
; 0000 00C1 // SPI disabled
; 0000 00C2 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00C3 
; 0000 00C4 // TWI initialization
; 0000 00C5 // TWI disabled
; 0000 00C6 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00C7 
; 0000 00C8 // Global enable interrupts
; 0000 00C9 #asm("sei")
;PCODE: $000000E1 VOL: 0
	sei
;PCODE: $000000E2 VOL: 0
; 0000 00CA 
; 0000 00CB while (1)
;PCODE: $000000E3 VOL: 0
; 0000 00CC       {
; 0000 00CD       PORTB = a;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00CE       PORTD = 0b11111110;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00CF       PORTC = ParseToHex(TensHour);
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00D0       delay_ms(5);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00D1       PORTD = 0b11111101;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00D2       PORTC = ParseToHex(OnesHour) | DP;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 00D3       delay_ms(5);
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00D4       PORTD = 0b11111011;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 00D5       PORTC = ParseToHex(TensMin);
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00D6       delay_ms(5);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00D7       PORTD = 0b11110111;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 00D8       PORTC = ParseToHex(OnesMin) | DP ;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00D9       delay_ms(5);
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00DA       PORTD = 0b11101111;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00DB       PORTC = ParseToHex(TensSec);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 00DC       delay_ms(5);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00DD       PORTD = 0b11011111;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00DE       PORTC = ParseToHex(OnesSec) | DP ;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00DF       delay_ms(5);
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 00E0       }
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 00E1 }
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
