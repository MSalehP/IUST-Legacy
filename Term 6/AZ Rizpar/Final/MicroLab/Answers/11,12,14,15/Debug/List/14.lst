
AVRASM ver. 2.1.30  C:\Users\Lenovo\Desktop\14,15\Debug\List\14.asm Sat Jan 06 00:59:37 2024

C:\Users\Lenovo\Desktop\14,15\Debug\List\14.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\14,15\Debug\List\14.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\14,15\Debug\List\14.asm(1090): warning: Register r7 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _switchNumber=R4
                 	.DEF _switchNumber_msb=R5
                 	.DEF _counter=R7
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0052 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
C:\Users\Lenovo\Desktop\14,15\Debug\List\14.asm(1129): warning: .cseg .db misalignment - padding zero byte
000033 0000      	.DB  0x0
                 
                 _0x3:
000034 3130
000035 3332
000036 3534
000037 3736      	.DB  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
000038 3938
000039 4241
00003a 4443
00003b 4645      	.DB  0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46
                 _0x0:
00003c 0a0d
00003d 4920
00003e 206e
00003f 6874      	.DB  0xD,0xA,0x20,0x49,0x6E,0x20,0x74,0x68
000040 2065
000041 616e
000042 656d
000043 6f20      	.DB  0x65,0x20,0x6E,0x61,0x6D,0x65,0x20,0x6F
000044 2066
000045 6f47
000046 0d64
000047 000a      	.DB  0x66,0x20,0x47,0x6F,0x64,0xD,0xA,0x0
                 
                 __GLOBAL_INI_TBL:
000048 0001      	.DW  0x01
000049 0007      	.DW  0x07
00004a 0066      	.DW  __REG_VARS*2
                 
00004b 0010      	.DW  0x10
00004c 027b      	.DW  _HEXNUMBERS
00004d 0068      	.DW  _0x3*2
                 
00004e 0018      	.DW  0x18
00004f 0260      	.DW  _0x8
000050 0078      	.DW  _0x0*2
                 
                 _0xFFFFFFFF:
000051 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000052 94f8      	CLI
000053 27ee      	CLR  R30
000054 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000055 e0f1      	LDI  R31,1
000056 bffb      	OUT  GICR,R31
000057 bfeb      	OUT  GICR,R30
000058 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000059 e08d      	LDI  R24,(14-2)+1
00005a e0a2      	LDI  R26,2
00005b 27bb      	CLR  R27
                 __CLEAR_REG:
00005c 93ed      	ST   X+,R30
00005d 958a      	DEC  R24
00005e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000060 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000061 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000062 93ed      	ST   X+,R30
000063 9701      	SBIW R24,1
000064 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000065 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000066 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000067 9185      	LPM  R24,Z+
000068 9195      	LPM  R25,Z+
000069 9700      	SBIW R24,0
00006a f061      	BREQ __GLOBAL_INI_END
00006b 91a5      	LPM  R26,Z+
00006c 91b5      	LPM  R27,Z+
00006d 9005      	LPM  R0,Z+
00006e 9015      	LPM  R1,Z+
00006f 01bf      	MOVW R22,R30
000070 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000071 9005      	LPM  R0,Z+
000072 920d      	ST   X+,R0
000073 9701      	SBIW R24,1
000074 f7e1      	BRNE __GLOBAL_INI_LOOP
000075 01fb      	MOVW R30,R22
000076 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000077 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000078 bfed      	OUT  SPL,R30
000079 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007d 940c 007f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;
                 ;void usart_send_string(char *str);
                 ;void make_hex(int switchNumber);
                 ;
                 ;int switchNumber;
                 ;bool counter = false;
                 ;char hex[3];
                 ;char HEXNUMBERS[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
                 
                 	.DSEG
                 ;
                 ;void main(void)
                 ; 0000 000F {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0010 
                 ; 0000 0011 
                 ; 0000 0012 
                 ; 0000 0013 
                 ; 0000 0014 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00007f e0e0      	LDI  R30,LOW(0)
000080 bbe4      	OUT  0x14,R30
                 ; 0000 0015 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000081 efef      	LDI  R30,LOW(255)
000082 bbe5      	OUT  0x15,R30
                 ; 0000 0016 
                 ; 0000 0017 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000083 bbe1      	OUT  0x11,R30
                 ; 0000 0018 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000084 e0e0      	LDI  R30,LOW(0)
000085 bbe2      	OUT  0x12,R30
                 ; 0000 0019 
                 ; 0000 001A // Timer/Counter 0 initialization
                 ; 0000 001B // Clock source: System Clock
                 ; 0000 001C // Clock value: Timer 0 Stopped
                 ; 0000 001D // Mode: Normal top=0xFF
                 ; 0000 001E // OC0 output: Disconnected
                 ; 0000 001F TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000086 bfe3      	OUT  0x33,R30
                 ; 0000 0020 TCNT0=0x00;
000087 bfe2      	OUT  0x32,R30
                 ; 0000 0021 OCR0=0x00;
000088 bfec      	OUT  0x3C,R30
                 ; 0000 0022 
                 ; 0000 0023 // Timer/Counter 1 initialization
                 ; 0000 0024 // Clock source: System Clock
                 ; 0000 0025 // Clock value: Timer1 Stopped
                 ; 0000 0026 // Mode: Normal top=0xFFFF
                 ; 0000 0027 // OC1A output: Disconnected
                 ; 0000 0028 // OC1B output: Disconnected
                 ; 0000 0029 // Noise Canceler: Off
                 ; 0000 002A // Input Capture on Falling Edge
                 ; 0000 002B // Timer1 Overflow Interrupt: Off
                 ; 0000 002C // Input Capture Interrupt: Off
                 ; 0000 002D // Compare A Match Interrupt: Off
                 ; 0000 002E // Compare B Match Interrupt: Off
                 ; 0000 002F TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000089 bdef      	OUT  0x2F,R30
                 ; 0000 0030 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00008a bdee      	OUT  0x2E,R30
                 ; 0000 0031 TCNT1H=0x00;
00008b bded      	OUT  0x2D,R30
                 ; 0000 0032 TCNT1L=0x00;
00008c bdec      	OUT  0x2C,R30
                 ; 0000 0033 ICR1H=0x00;
00008d bde7      	OUT  0x27,R30
                 ; 0000 0034 ICR1L=0x00;
00008e bde6      	OUT  0x26,R30
                 ; 0000 0035 OCR1AH=0x00;
00008f bdeb      	OUT  0x2B,R30
                 ; 0000 0036 OCR1AL=0x00;
000090 bdea      	OUT  0x2A,R30
                 ; 0000 0037 OCR1BH=0x00;
000091 bde9      	OUT  0x29,R30
                 ; 0000 0038 OCR1BL=0x00;
000092 bde8      	OUT  0x28,R30
                 ; 0000 0039 
                 ; 0000 003A // Timer/Counter 2 initialization
                 ; 0000 003B // Clock source: System Clock
                 ; 0000 003C // Clock value: Timer2 Stopped
                 ; 0000 003D // Mode: Normal top=0xFF
                 ; 0000 003E // OC2 output: Disconnected
                 ; 0000 003F ASSR=0<<AS2;
000093 bde2      	OUT  0x22,R30
                 ; 0000 0040 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000094 bde5      	OUT  0x25,R30
                 ; 0000 0041 TCNT2=0x00;
000095 bde4      	OUT  0x24,R30
                 ; 0000 0042 OCR2=0x00;
000096 bde3      	OUT  0x23,R30
                 ; 0000 0043 
                 ; 0000 0044 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0045 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000097 bfe9      	OUT  0x39,R30
                 ; 0000 0046 
                 ; 0000 0047 // External Interrupt(s) initialization
                 ; 0000 0048 // INT0: Off
                 ; 0000 0049 // INT1: Off
                 ; 0000 004A // INT2: Off
                 ; 0000 004B MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000098 bfe5      	OUT  0x35,R30
                 ; 0000 004C MCUCSR=(0<<ISC2);
000099 bfe4      	OUT  0x34,R30
                 ; 0000 004D 
                 ; 0000 004E // USART initialization
                 ; 0000 004F // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0050 // USART Receiver: On
                 ; 0000 0051 // USART Transmitter: On
                 ; 0000 0052 // USART Mode: Asynchronous
                 ; 0000 0053 // USART Baud Rate: 9600
                 ; 0000 0054 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00009a b9eb      	OUT  0xB,R30
                 ; 0000 0055 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00009b e1e8      	LDI  R30,LOW(24)
00009c b9ea      	OUT  0xA,R30
                 ; 0000 0056 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00009d e8e6      	LDI  R30,LOW(134)
00009e bde0      	OUT  0x20,R30
                 ; 0000 0057 UBRRH=0x00;
00009f e0e0      	LDI  R30,LOW(0)
0000a0 bde0      	OUT  0x20,R30
                 ; 0000 0058 UBRRL=0x33;
0000a1 e3e3      	LDI  R30,LOW(51)
0000a2 b9e9      	OUT  0x9,R30
                 ; 0000 0059 
                 ; 0000 005A // Analog Comparator initialization
                 ; 0000 005B // Analog Comparator: Off
                 ; 0000 005C // The Analog Comparator's positive input is
                 ; 0000 005D // connected to the AIN0 pin
                 ; 0000 005E // The Analog Comparator's negative input is
                 ; 0000 005F // connected to the AIN1 pin
                 ; 0000 0060 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a3 e8e0      	LDI  R30,LOW(128)
0000a4 b9e8      	OUT  0x8,R30
                 ; 0000 0061 SFIOR=(0<<ACME);
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bfe0      	OUT  0x30,R30
                 ; 0000 0062 
                 ; 0000 0063 // ADC initialization
                 ; 0000 0064 // ADC disabled
                 ; 0000 0065 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000a7 b9e6      	OUT  0x6,R30
                 ; 0000 0066 
                 ; 0000 0067 // SPI initialization
                 ; 0000 0068 // SPI disabled
                 ; 0000 0069 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a8 b9ed      	OUT  0xD,R30
                 ; 0000 006A 
                 ; 0000 006B // TWI initialization
                 ; 0000 006C // TWI disabled
                 ; 0000 006D TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000a9 bfe6      	OUT  0x36,R30
                 ; 0000 006E 
                 ; 0000 006F 
                 ; 0000 0070 while (1)
                 _0x4:
                 ; 0000 0071     {
                 ; 0000 0072         if(!counter) {
0000aa 2077      	TST  R7
0000ab f439      	BRNE _0x7
                 ; 0000 0073             usart_send_string("\r\n In the name of God\r\n");
                +
0000ac e6a0     +LDI R26 , LOW ( _0x8 + ( 0 ) )
0000ad e0b2     +LDI R27 , HIGH ( _0x8 + ( 0 ) )
                 	__POINTW2MN _0x8,0
0000ae d03a      	RCALL _usart_send_string
                 ; 0000 0074             counter=true;
0000af e0e1      	LDI  R30,LOW(1)
0000b0 2e7e      	MOV  R7,R30
                 ; 0000 0075             switchNumber = PINC;
0000b1 940e 0287 	CALL SUBOPT_0x0
                 ; 0000 0076             make_hex(switchNumber);
                 ; 0000 0077             usart_send_string(hex);
                 ; 0000 0078             printf("\r\n");
                 ; 0000 0079             delay_ms(1000);
                 ; 0000 007A         }
                 ; 0000 007B         switchNumber = PINC;
                 _0x7:
0000b3 940e 0287 	CALL SUBOPT_0x0
                 ; 0000 007C         make_hex(switchNumber);
                 ; 0000 007D         usart_send_string(hex);
                 ; 0000 007E         printf("\r\n");
                 ; 0000 007F         delay_ms(1000);
                 ; 0000 0080 
                 ; 0000 0081     }
0000b5 cff4      	RJMP _0x4
                 ; 0000 0082 }
                 _0x9:
0000b6 cfff      	RJMP _0x9
                 ; .FEND
                 
                 	.DSEG
                 _0x8:
000260           	.BYTE 0x18
                 ;void make_hex(int switchNumber){
                 ; 0000 0083 void make_hex(int switchNumber){
                 
                 	.CSEG
                 _make_hex:
                 ; .FSTART _make_hex
                 ; 0000 0084     int index = 1;
                 ; 0000 0085     hex[0] = '0';
0000b7 93ba      	ST   -Y,R27
0000b8 93aa      	ST   -Y,R26
0000b9 931a      	ST   -Y,R17
0000ba 930a      	ST   -Y,R16
                 ;	switchNumber -> Y+2
                 ;	index -> R16,R17
                +
0000bb e001     +LDI R16 , LOW ( 1 )
0000bc e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
0000bd e3e0      	LDI  R30,LOW(48)
0000be 93e0 0278 	STS  _hex,R30
                 ; 0000 0086     hex[1] = '0';
                +
0000c0 93e0 0279+STS _hex + ( 1 ) , R30
                 	__PUTB1MN _hex,1
                 ; 0000 0087     hex[2] = '\0';
0000c2 e0e0      	LDI  R30,LOW(0)
                +
0000c3 93e0 027a+STS _hex + ( 2 ) , R30
                 	__PUTB1MN _hex,2
                 ; 0000 0088     while(switchNumber != 0)
                 _0xA:
0000c5 81ea      	LDD  R30,Y+2
0000c6 81fb      	LDD  R31,Y+2+1
0000c7 9730      	SBIW R30,0
0000c8 f0e1      	BREQ _0xC
                 ; 0000 0089         {
                 ; 0000 008A             int rem = switchNumber % 16;
                 ; 0000 008B             hex[index] = HEXNUMBERS[rem];
0000c9 9722      	SBIW R28,2
                 ;	switchNumber -> Y+4
                 ;	rem -> Y+0
0000ca 81ec      	LDD  R30,Y+4
0000cb 81fd      	LDD  R31,Y+4+1
0000cc e0af      	LDI  R26,LOW(15)
0000cd e0b0      	LDI  R27,HIGH(15)
0000ce 940e 02eb 	CALL __MANDW12
0000d0 83e8      	ST   Y,R30
0000d1 83f9      	STD  Y+1,R31
0000d2 01d8      	MOVW R26,R16
0000d3 58a8      	SUBI R26,LOW(-_hex)
0000d4 4fbd      	SBCI R27,HIGH(-_hex)
0000d5 58e5      	SUBI R30,LOW(-_HEXNUMBERS)
0000d6 4ffd      	SBCI R31,HIGH(-_HEXNUMBERS)
0000d7 81e0      	LD   R30,Z
0000d8 93ec      	ST   X,R30
                 ; 0000 008C             index--;
                +
0000d9 5001     +SUBI R16 , LOW ( 1 )
0000da 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 008D             switchNumber /= 16;
0000db 81ac      	LDD  R26,Y+4
0000dc 81bd      	LDD  R27,Y+4+1
0000dd e1e0      	LDI  R30,LOW(16)
0000de e0f0      	LDI  R31,HIGH(16)
0000df 940e 02e6 	CALL __DIVW21
0000e1 83ec      	STD  Y+4,R30
0000e2 83fd      	STD  Y+4+1,R31
                 ; 0000 008E         }
0000e3 9622      	ADIW R28,2
0000e4 cfe0      	RJMP _0xA
                 _0xC:
                 ; 0000 008F }
0000e5 8119      	LDD  R17,Y+1
0000e6 8108      	LDD  R16,Y+0
0000e7 9624      	ADIW R28,4
0000e8 9508      	RET
                 ; .FEND
                 ;
                 ;void usart_send_string(char *str)
                 ; 0000 0092 {
                 _usart_send_string:
                 ; .FSTART _usart_send_string
                 ; 0000 0093     unsigned char i = 0;
                 ; 0000 0094     for(i=0;str[i];i++)
0000e9 93ba      	ST   -Y,R27
0000ea 93aa      	ST   -Y,R26
0000eb 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
0000ec e010      	LDI  R17,0
0000ed e010      	LDI  R17,LOW(0)
                 _0xE:
0000ee 81a9      	LDD  R26,Y+1
0000ef 81ba      	LDD  R27,Y+1+1
0000f0 27ee      	CLR  R30
0000f1 0fa1      	ADD  R26,R17
0000f2 1fbe      	ADC  R27,R30
0000f3 91ec      	LD   R30,X
0000f4 30e0      	CPI  R30,0
0000f5 f049      	BREQ _0xF
                 ; 0000 0095     putchar(str[i]);
0000f6 81a9      	LDD  R26,Y+1
0000f7 81ba      	LDD  R27,Y+1+1
0000f8 27ee      	CLR  R30
0000f9 0fa1      	ADD  R26,R17
0000fa 1fbe      	ADC  R27,R30
0000fb 91ac      	LD   R26,X
0000fc d004      	RCALL _putchar
0000fd 5f1f      	SUBI R17,-1
0000fe cfef      	RJMP _0xE
                 _0xF:
                 ; 0000 0096 }
0000ff 8118      	LDD  R17,Y+0
000100 c012      	RJMP _0x2060001
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000101 93aa      	ST   -Y,R26
                 putchar0:
000102 9b5d           sbis usr,udre
000103 cffe           rjmp putchar0
000104 81e8           ld   r30,y
000105 b9ec           out  udr,r30
000106 9621      	ADIW R28,1
000107 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
000108 93ba      	ST   -Y,R27
000109 93aa      	ST   -Y,R26
00010a 81aa      	LDD  R26,Y+2
00010b dff5      	RCALL _putchar
00010c 81a8      	LD   R26,Y
00010d 81b9      	LDD  R27,Y+1
00010e 91ed      	LD   R30,X+
00010f 91fd      	LD   R31,X+
000110 9631      	ADIW R30,1
000111 93fe      	ST   -X,R31
000112 93ee      	ST   -X,R30
                 _0x2060001:
000113 9623      	ADIW R28,3
000114 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000115 93ba      	ST   -Y,R27
000116 93aa      	ST   -Y,R26
000117 9726      	SBIW R28,6
000118 940e 030b 	CALL __SAVELOCR6
00011a e010      	LDI  R17,0
00011b 85ac      	LDD  R26,Y+12
00011c 85bd      	LDD  R27,Y+12+1
00011d e0e0      	LDI  R30,LOW(0)
00011e e0f0      	LDI  R31,HIGH(0)
00011f 93ed      	ST   X+,R30
000120 93fc      	ST   X,R31
                 _0x2000016:
000121 89ea      	LDD  R30,Y+18
000122 89fb      	LDD  R31,Y+18+1
000123 9631      	ADIW R30,1
000124 8bea      	STD  Y+18,R30
000125 8bfb      	STD  Y+18+1,R31
000126 9731      	SBIW R30,1
000127 91e4      	LPM  R30,Z
000128 2f2e      	MOV  R18,R30
000129 30e0      	CPI  R30,0
00012a f409      	BRNE PC+2
00012b c115      	RJMP _0x2000018
00012c 2fe1      	MOV  R30,R17
00012d 30e0      	CPI  R30,0
00012e f439      	BRNE _0x200001C
00012f 3225      	CPI  R18,37
000130 f411      	BRNE _0x200001D
000131 e011      	LDI  R17,LOW(1)
000132 c002      	RJMP _0x200001E
                 _0x200001D:
000133 940e 029c 	CALL SUBOPT_0x1
                 _0x200001E:
000135 c10a      	RJMP _0x200001B
                 _0x200001C:
000136 30e1      	CPI  R30,LOW(0x1)
000137 f4a9      	BRNE _0x200001F
000138 3225      	CPI  R18,37
000139 f419      	BRNE _0x2000020
00013a 940e 029c 	CALL SUBOPT_0x1
00013c c102      	RJMP _0x20000CC
                 _0x2000020:
00013d e012      	LDI  R17,LOW(2)
00013e e040      	LDI  R20,LOW(0)
00013f e000      	LDI  R16,LOW(0)
000140 322d      	CPI  R18,45
000141 f411      	BRNE _0x2000021
000142 e001      	LDI  R16,LOW(1)
000143 c0fc      	RJMP _0x200001B
                 _0x2000021:
000144 322b      	CPI  R18,43
000145 f411      	BRNE _0x2000022
000146 e24b      	LDI  R20,LOW(43)
000147 c0f8      	RJMP _0x200001B
                 _0x2000022:
000148 3220      	CPI  R18,32
000149 f411      	BRNE _0x2000023
00014a e240      	LDI  R20,LOW(32)
00014b c0f4      	RJMP _0x200001B
                 _0x2000023:
00014c c002      	RJMP _0x2000024
                 _0x200001F:
00014d 30e2      	CPI  R30,LOW(0x2)
00014e f439      	BRNE _0x2000025
                 _0x2000024:
00014f e050      	LDI  R21,LOW(0)
000150 e013      	LDI  R17,LOW(3)
000151 3320      	CPI  R18,48
000152 f411      	BRNE _0x2000026
000153 6800      	ORI  R16,LOW(128)
000154 c0eb      	RJMP _0x200001B
                 _0x2000026:
000155 c003      	RJMP _0x2000027
                 _0x2000025:
000156 30e3      	CPI  R30,LOW(0x3)
000157 f009      	BREQ PC+2
000158 c0e7      	RJMP _0x200001B
                 _0x2000027:
000159 3320      	CPI  R18,48
00015a f010      	BRLO _0x200002A
00015b 332a      	CPI  R18,58
00015c f008      	BRLO _0x200002B
                 _0x200002A:
00015d c007      	RJMP _0x2000029
                 _0x200002B:
00015e e0aa      	LDI  R26,LOW(10)
00015f 9f5a      	MUL  R21,R26
000160 2d50      	MOV  R21,R0
000161 2fe2      	MOV  R30,R18
000162 53e0      	SUBI R30,LOW(48)
000163 0f5e      	ADD  R21,R30
000164 c0db      	RJMP _0x200001B
                 _0x2000029:
000165 2fe2      	MOV  R30,R18
000166 36e3      	CPI  R30,LOW(0x63)
000167 f449      	BRNE _0x200002F
000168 940e 02a3 	CALL SUBOPT_0x2
00016a 89e8      	LDD  R30,Y+16
00016b 89f9      	LDD  R31,Y+16+1
00016c 81a4      	LDD  R26,Z+4
00016d 93aa      	ST   -Y,R26
00016e 940e 02a9 	CALL SUBOPT_0x3
000170 c0ce      	RJMP _0x2000030
                 _0x200002F:
000171 37e3      	CPI  R30,LOW(0x73)
000172 f441      	BRNE _0x2000032
000173 940e 02a3 	CALL SUBOPT_0x2
000175 940e 02af 	CALL SUBOPT_0x4
000177 940e 026e 	CALL _strlen
000179 2f1e      	MOV  R17,R30
00017a c00a      	RJMP _0x2000033
                 _0x2000032:
00017b 37e0      	CPI  R30,LOW(0x70)
00017c f461      	BRNE _0x2000035
00017d 940e 02a3 	CALL SUBOPT_0x2
00017f 940e 02af 	CALL SUBOPT_0x4
000181 940e 027a 	CALL _strlenf
000183 2f1e      	MOV  R17,R30
000184 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000185 6002      	ORI  R16,LOW(2)
000186 770f      	ANDI R16,LOW(127)
000187 e030      	LDI  R19,LOW(0)
000188 c034      	RJMP _0x2000036
                 _0x2000035:
000189 36e4      	CPI  R30,LOW(0x64)
00018a f011      	BREQ _0x2000039
00018b 36e9      	CPI  R30,LOW(0x69)
00018c f411      	BRNE _0x200003A
                 _0x2000039:
00018d 6004      	ORI  R16,LOW(4)
00018e c002      	RJMP _0x200003B
                 _0x200003A:
00018f 37e5      	CPI  R30,LOW(0x75)
000190 f431      	BRNE _0x200003C
                 _0x200003B:
000191 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000192 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000193 83ee      	STD  Y+6,R30
000194 83ff      	STD  Y+6+1,R31
000195 e015      	LDI  R17,LOW(5)
000196 c00c      	RJMP _0x200003D
                 _0x200003C:
000197 35e8      	CPI  R30,LOW(0x58)
000198 f411      	BRNE _0x200003F
000199 6008      	ORI  R16,LOW(8)
00019a c003      	RJMP _0x2000040
                 _0x200003F:
00019b 37e8      	CPI  R30,LOW(0x78)
00019c f009      	BREQ PC+2
00019d c0a1      	RJMP _0x2000071
                 _0x2000040:
00019e e5ee      	LDI  R30,LOW(_tbl16_G100*2)
00019f e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001a0 83ee      	STD  Y+6,R30
0001a1 83ff      	STD  Y+6+1,R31
0001a2 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001a3 ff02      	SBRS R16,2
0001a4 c014      	RJMP _0x2000042
0001a5 940e 02a3 	CALL SUBOPT_0x2
0001a7 940e 02b9 	CALL SUBOPT_0x5
0001a9 85ab      	LDD  R26,Y+11
0001aa 23aa      	TST  R26
0001ab f43a      	BRPL _0x2000043
0001ac 85ea      	LDD  R30,Y+10
0001ad 85fb      	LDD  R31,Y+10+1
0001ae 940e 02cf 	CALL __ANEGW1
0001b0 87ea      	STD  Y+10,R30
0001b1 87fb      	STD  Y+10+1,R31
0001b2 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001b3 3040      	CPI  R20,0
0001b4 f011      	BREQ _0x2000044
0001b5 5f1f      	SUBI R17,-LOW(1)
0001b6 c001      	RJMP _0x2000045
                 _0x2000044:
0001b7 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001b8 c004      	RJMP _0x2000046
                 _0x2000042:
0001b9 940e 02a3 	CALL SUBOPT_0x2
0001bb 940e 02b9 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001bd fd00      	SBRC R16,0
0001be c011      	RJMP _0x2000047
                 _0x2000048:
0001bf 1715      	CP   R17,R21
0001c0 f478      	BRSH _0x200004A
0001c1 ff07      	SBRS R16,7
0001c2 c008      	RJMP _0x200004B
0001c3 ff02      	SBRS R16,2
0001c4 c004      	RJMP _0x200004C
0001c5 7f0b      	ANDI R16,LOW(251)
0001c6 2f24      	MOV  R18,R20
0001c7 5011      	SUBI R17,LOW(1)
0001c8 c001      	RJMP _0x200004D
                 _0x200004C:
0001c9 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001ca c001      	RJMP _0x200004E
                 _0x200004B:
0001cb e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001cc 940e 029c 	CALL SUBOPT_0x1
0001ce 5051      	SUBI R21,LOW(1)
0001cf cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001d0 2f31      	MOV  R19,R17
0001d1 ff01      	SBRS R16,1
0001d2 c017      	RJMP _0x200004F
                 _0x2000050:
0001d3 3030      	CPI  R19,0
0001d4 f0a1      	BREQ _0x2000052
0001d5 ff03      	SBRS R16,3
0001d6 c006      	RJMP _0x2000053
0001d7 81ee      	LDD  R30,Y+6
0001d8 81ff      	LDD  R31,Y+6+1
0001d9 9125      	LPM  R18,Z+
0001da 83ee      	STD  Y+6,R30
0001db 83ff      	STD  Y+6+1,R31
0001dc c005      	RJMP _0x2000054
                 _0x2000053:
0001dd 81ae      	LDD  R26,Y+6
0001de 81bf      	LDD  R27,Y+6+1
0001df 912d      	LD   R18,X+
0001e0 83ae      	STD  Y+6,R26
0001e1 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001e2 940e 029c 	CALL SUBOPT_0x1
0001e4 3050      	CPI  R21,0
0001e5 f009      	BREQ _0x2000055
0001e6 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001e7 5031      	SUBI R19,LOW(1)
0001e8 cfea      	RJMP _0x2000050
                 _0x2000052:
0001e9 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001ea e320      	LDI  R18,LOW(48)
0001eb 81ee      	LDD  R30,Y+6
0001ec 81ff      	LDD  R31,Y+6+1
0001ed 940e 0307 	CALL __GETW1PF
0001ef 87e8      	STD  Y+8,R30
0001f0 87f9      	STD  Y+8+1,R31
0001f1 81ee      	LDD  R30,Y+6
0001f2 81ff      	LDD  R31,Y+6+1
0001f3 9632      	ADIW R30,2
0001f4 83ee      	STD  Y+6,R30
0001f5 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001f6 85e8      	LDD  R30,Y+8
0001f7 85f9      	LDD  R31,Y+8+1
0001f8 85aa      	LDD  R26,Y+10
0001f9 85bb      	LDD  R27,Y+10+1
0001fa 17ae      	CP   R26,R30
0001fb 07bf      	CPC  R27,R31
0001fc f050      	BRLO _0x200005C
0001fd 5f2f      	SUBI R18,-LOW(1)
0001fe 85a8      	LDD  R26,Y+8
0001ff 85b9      	LDD  R27,Y+8+1
000200 85ea      	LDD  R30,Y+10
000201 85fb      	LDD  R31,Y+10+1
000202 1bea      	SUB  R30,R26
000203 0bfb      	SBC  R31,R27
000204 87ea      	STD  Y+10,R30
000205 87fb      	STD  Y+10+1,R31
000206 cfef      	RJMP _0x200005A
                 _0x200005C:
000207 332a      	CPI  R18,58
000208 f028      	BRLO _0x200005D
000209 ff03      	SBRS R16,3
00020a c002      	RJMP _0x200005E
00020b 5f29      	SUBI R18,-LOW(7)
00020c c001      	RJMP _0x200005F
                 _0x200005E:
00020d 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
00020e fd04      	SBRC R16,4
00020f c01a      	RJMP _0x2000061
000210 3321      	CPI  R18,49
000211 f420      	BRSH _0x2000063
000212 85a8      	LDD  R26,Y+8
000213 85b9      	LDD  R27,Y+8+1
000214 9711      	SBIW R26,1
000215 f409      	BRNE _0x2000062
                 _0x2000063:
000216 c009      	RJMP _0x20000CD
                 _0x2000062:
000217 1753      	CP   R21,R19
000218 f010      	BRLO _0x2000067
000219 ff00      	SBRS R16,0
00021a c001      	RJMP _0x2000068
                 _0x2000067:
00021b c013      	RJMP _0x2000066
                 _0x2000068:
00021c e220      	LDI  R18,LOW(32)
00021d ff07      	SBRS R16,7
00021e c00b      	RJMP _0x2000069
00021f e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000220 6100      	ORI  R16,LOW(16)
000221 ff02      	SBRS R16,2
000222 c007      	RJMP _0x200006A
000223 7f0b      	ANDI R16,LOW(251)
000224 934a      	ST   -Y,R20
000225 940e 02a9 	CALL SUBOPT_0x3
000227 3050      	CPI  R21,0
000228 f009      	BREQ _0x200006B
000229 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
00022a 940e 029c 	CALL SUBOPT_0x1
00022c 3050      	CPI  R21,0
00022d f009      	BREQ _0x200006C
00022e 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
00022f 5031      	SUBI R19,LOW(1)
000230 85a8      	LDD  R26,Y+8
000231 85b9      	LDD  R27,Y+8+1
000232 9712      	SBIW R26,2
000233 f008      	BRLO _0x2000059
000234 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
000235 ff00      	SBRS R16,0
000236 c008      	RJMP _0x200006D
                 _0x200006E:
000237 3050      	CPI  R21,0
000238 f031      	BREQ _0x2000070
000239 5051      	SUBI R21,LOW(1)
00023a e2e0      	LDI  R30,LOW(32)
00023b 93ea      	ST   -Y,R30
00023c 940e 02a9 	CALL SUBOPT_0x3
00023e cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
00023f e010      	LDI  R17,LOW(0)
                 _0x200001B:
000240 cee0      	RJMP _0x2000016
                 _0x2000018:
000241 85ac      	LDD  R26,Y+12
000242 85bd      	LDD  R27,Y+12+1
000243 940e 0303 	CALL __GETW1P
000245 940e 0312 	CALL __LOADLOCR6
000247 9664      	ADIW R28,20
000248 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000249 92ff      	PUSH R15
00024a 2ef8      	MOV  R15,R24
00024b 9726      	SBIW R28,6
00024c 931a      	ST   -Y,R17
00024d 930a      	ST   -Y,R16
00024e 01de      	MOVW R26,R28
00024f 9614      	ADIW R26,4
000250 940e 02cb 	CALL __ADDW2R15
000252 018d      	MOVW R16,R26
000253 e0e0      	LDI  R30,LOW(0)
000254 83ec      	STD  Y+4,R30
000255 83ed      	STD  Y+4+1,R30
000256 83ee      	STD  Y+6,R30
000257 83ef      	STD  Y+6+1,R30
000258 01de      	MOVW R26,R28
000259 9618      	ADIW R26,8
00025a 940e 02cb 	CALL __ADDW2R15
00025c 940e 0303 	CALL __GETW1P
00025e 93fa      	ST   -Y,R31
00025f 93ea      	ST   -Y,R30
000260 931a      	ST   -Y,R17
000261 930a      	ST   -Y,R16
000262 e0e8      	LDI  R30,LOW(_put_usart_G100)
000263 e0f1      	LDI  R31,HIGH(_put_usart_G100)
000264 93fa      	ST   -Y,R31
000265 93ea      	ST   -Y,R30
000266 01de      	MOVW R26,R28
000267 9618      	ADIW R26,8
000268 deac      	RCALL __print_G100
000269 8119      	LDD  R17,Y+1
00026a 8108      	LDD  R16,Y+0
00026b 9628      	ADIW R28,8
00026c 90ff      	POP  R15
00026d 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00026e 93ba      	ST   -Y,R27
00026f 93aa      	ST   -Y,R26
000270 91a9          ld   r26,y+
000271 91b9          ld   r27,y+
000272 27ee          clr  r30
000273 27ff          clr  r31
                 strlen0:
000274 916d          ld   r22,x+
000275 2366          tst  r22
000276 f011          breq strlen1
000277 9631          adiw r30,1
000278 cffb          rjmp strlen0
                 strlen1:
000279 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
00027a 93ba      	ST   -Y,R27
00027b 93aa      	ST   -Y,R26
00027c 27aa          clr  r26
00027d 27bb          clr  r27
00027e 91e9          ld   r30,y+
00027f 91f9          ld   r31,y+
                 strlenf0:
000280 9005      	lpm  r0,z+
000281 2000          tst  r0
000282 f011          breq strlenf1
000283 9611          adiw r26,1
000284 cffb          rjmp strlenf0
                 strlenf1:
000285 01fd          movw r30,r26
000286 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _hex:
000278           	.BYTE 0x3
                 _HEXNUMBERS:
00027b           	.BYTE 0x10
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x0:
000287 b243      	IN   R4,19
000288 2455      	CLR  R5
000289 01d2      	MOVW R26,R4
00028a 940e 00b7 	CALL _make_hex
00028c e7a8      	LDI  R26,LOW(_hex)
00028d e0b2      	LDI  R27,HIGH(_hex)
00028e 940e 00e9 	CALL _usart_send_string
                +
000290 e8ed     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
000291 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
000292 93fa      	ST   -Y,R31
000293 93ea      	ST   -Y,R30
000294 e080      	LDI  R24,0
000295 940e 0249 	CALL _printf
000297 9622      	ADIW R28,2
000298 eea8      	LDI  R26,LOW(1000)
000299 e0b3      	LDI  R27,HIGH(1000)
00029a 940c 02c1 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
00029c 932a      	ST   -Y,R18
00029d 85ad      	LDD  R26,Y+13
00029e 85be      	LDD  R27,Y+13+1
00029f 85ef      	LDD  R30,Y+15
0002a0 89f8      	LDD  R31,Y+15+1
0002a1 9509      	ICALL
0002a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0002a3 89e8      	LDD  R30,Y+16
0002a4 89f9      	LDD  R31,Y+16+1
0002a5 9734      	SBIW R30,4
0002a6 8be8      	STD  Y+16,R30
0002a7 8bf9      	STD  Y+16+1,R31
0002a8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0002a9 85ad      	LDD  R26,Y+13
0002aa 85be      	LDD  R27,Y+13+1
0002ab 85ef      	LDD  R30,Y+15
0002ac 89f8      	LDD  R31,Y+15+1
0002ad 9509      	ICALL
0002ae 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0002af 89a8      	LDD  R26,Y+16
0002b0 89b9      	LDD  R27,Y+16+1
0002b1 9614      	ADIW R26,4
0002b2 940e 0303 	CALL __GETW1P
0002b4 83ee      	STD  Y+6,R30
0002b5 83ff      	STD  Y+6+1,R31
0002b6 81ae      	LDD  R26,Y+6
0002b7 81bf      	LDD  R27,Y+6+1
0002b8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0002b9 89a8      	LDD  R26,Y+16
0002ba 89b9      	LDD  R27,Y+16+1
0002bb 9614      	ADIW R26,4
0002bc 940e 0303 	CALL __GETW1P
0002be 87ea      	STD  Y+10,R30
0002bf 87fb      	STD  Y+10+1,R31
0002c0 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0002c1 9610      	adiw r26,0
0002c2 f039      	breq __delay_ms1
                 __delay_ms0:
                +
0002c3 ed80     +LDI R24 , LOW ( 0x7D0 )
0002c4 e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
0002c5 9701     +SBIW R24 , 1
0002c6 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
0002c7 95a8      	wdr
0002c8 9711      	sbiw r26,1
0002c9 f7c9      	brne __delay_ms0
                 __delay_ms1:
0002ca 9508      	ret
                 
                 __ADDW2R15:
0002cb 2400      	CLR  R0
0002cc 0daf      	ADD  R26,R15
0002cd 1db0      	ADC  R27,R0
0002ce 9508      	RET
                 
                 __ANEGW1:
0002cf 95f1      	NEG  R31
0002d0 95e1      	NEG  R30
0002d1 40f0      	SBCI R31,0
0002d2 9508      	RET
                 
                 __DIVW21U:
0002d3 2400      	CLR  R0
0002d4 2411      	CLR  R1
0002d5 e190      	LDI  R25,16
                 __DIVW21U1:
0002d6 0faa      	LSL  R26
0002d7 1fbb      	ROL  R27
0002d8 1c00      	ROL  R0
0002d9 1c11      	ROL  R1
0002da 1a0e      	SUB  R0,R30
0002db 0a1f      	SBC  R1,R31
0002dc f418      	BRCC __DIVW21U2
0002dd 0e0e      	ADD  R0,R30
0002de 1e1f      	ADC  R1,R31
0002df c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002e0 60a1      	SBR  R26,1
                 __DIVW21U3:
0002e1 959a      	DEC  R25
0002e2 f799      	BRNE __DIVW21U1
0002e3 01fd      	MOVW R30,R26
0002e4 01d0      	MOVW R26,R0
0002e5 9508      	RET
                 
                 __DIVW21:
0002e6 d00e      	RCALL __CHKSIGNW
0002e7 dfeb      	RCALL __DIVW21U
0002e8 f40e      	BRTC __DIVW211
0002e9 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0002ea 9508      	RET
                 
                 __MANDW12:
0002eb 94e8      	CLT
0002ec fff7      	SBRS R31,7
0002ed c002      	RJMP __MANDW121
0002ee dfe0      	RCALL __ANEGW1
0002ef 9468      	SET
                 __MANDW121:
0002f0 23ea      	AND  R30,R26
0002f1 23fb      	AND  R31,R27
0002f2 f40e      	BRTC __MANDW122
0002f3 dfdb      	RCALL __ANEGW1
                 __MANDW122:
0002f4 9508      	RET
                 
                 __CHKSIGNW:
0002f5 94e8      	CLT
0002f6 fff7      	SBRS R31,7
0002f7 c002      	RJMP __CHKSW1
0002f8 dfd6      	RCALL __ANEGW1
0002f9 9468      	SET
                 __CHKSW1:
0002fa ffb7      	SBRS R27,7
0002fb c006      	RJMP __CHKSW2
0002fc 95a0      	COM  R26
0002fd 95b0      	COM  R27
0002fe 9611      	ADIW R26,1
0002ff f800      	BLD  R0,0
000300 9403      	INC  R0
000301 fa00      	BST  R0,0
                 __CHKSW2:
000302 9508      	RET
                 
                 __GETW1P:
000303 91ed      	LD   R30,X+
000304 91fc      	LD   R31,X
000305 9711      	SBIW R26,1
000306 9508      	RET
                 
                 __GETW1PF:
000307 9005      	LPM  R0,Z+
000308 91f4      	LPM  R31,Z
000309 2de0      	MOV  R30,R0
00030a 9508      	RET
                 
                 __SAVELOCR6:
00030b 935a      	ST   -Y,R21
                 __SAVELOCR5:
00030c 934a      	ST   -Y,R20
                 __SAVELOCR4:
00030d 933a      	ST   -Y,R19
                 __SAVELOCR3:
00030e 932a      	ST   -Y,R18
                 __SAVELOCR2:
00030f 931a      	ST   -Y,R17
000310 930a      	ST   -Y,R16
000311 9508      	RET
                 
                 __LOADLOCR6:
000312 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000313 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000314 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000315 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000316 8119      	LDD  R17,Y+1
000317 8108      	LD   R16,Y
000318 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  19 r1 :   5 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   0 r7 :   2 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  35 r17:  30 r18:  27 r19:   8 r20:   9 r21:  17 r22:   4 r23:   0 
r24:  11 r25:   5 r26:  72 r27:  41 r28:  14 r29:   1 r30: 161 r31:  55 
x  :  16 y  : 144 z  :  14 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :  19 and   :   2 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  24 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  36 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   2 
cp    :   3 cpc   :   1 cpi   :  30 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  23 ld    :  16 ldd   :  70 ldi   :  75 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  12 movw  :  12 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   6 out   :  41 pop   :   1 push  :   1 rcall :  10 ret   :  23 
reti  :   0 rjmp  :  60 rol   :   3 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :  14 sbr   :   1 sbrc  :   2 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  45 std   :  31 sts   :   3 sub   :   2 subi  :  17 swap  :   0 
tst   :   4 wdr   :   1 
Instructions used: 59 out of 116 (50.9%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000632   1506     80   1586   32768   4.8%
[.dseg] 0x000060 0x00028b      0     43     43    2048   2.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 4 warnings
