;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;
;
;//void usart_send_string(char *str);
;    // Declare your global variables here
;    char a;
;    int count = 0;
;    //int show_flag = 0;
;    char numbers_array[6];
;
;    //void delay() {
;      //  TCCR0 = (1 << CS02) | (1 << CS00);
;      //  TCNT0 = 251;
;      //  while ((TIFR & (1 << TOV0)) == 0);
;      //  TIFR = (1 << TOV0);
;    //}
;
;unsigned char number (unsigned char digit) {
; 0000 0014 unsigned char number (unsigned char digit) {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0015     if (digit == 0) {
;PCODE: $0000000F VOL: 0
;	digit -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0016         return 0x3F;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0017     }
; 0000 0018     if (digit == 1) {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0019         return 0x06;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001A     }
; 0000 001B     if (digit == 2) {
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 001C         return 0x5B;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 001D     }
; 0000 001E     if (digit == 3) {
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 001F         return 0x4F;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0020     }
; 0000 0021     if (digit == 4) {
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0022         return 0x66;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0023     }
; 0000 0024     if (digit == 5) {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0025         return 0x6D;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0026     }
; 0000 0027     if (digit == 6) {
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 0028         return 0x7D;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0029     }
; 0000 002A     if (digit == 7) {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002B         return 0x07;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 002C     }
; 0000 002D     if (digit == 8) {
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 002E         return 0x7F;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 002F     }
; 0000 0030     if (digit == 9) {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0031         return 0x6F;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0032     }
; 0000 0033 }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;void set_number(char c){
; 0000 0035 void set_number(char c){
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0036     if (c == '0'){
;PCODE: $0000005B VOL: 0
;	c -> Y+0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0037         PORTC = number(0);
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0038     }
; 0000 0039     if (c == '1'){
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 003A         PORTC = number(1);
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003B     }
; 0000 003C     if (c == '2'){
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 003D         PORTC = number(2);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 003E     }
; 0000 003F     if (c == '3'){
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0040         PORTC = number(3);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0041     }
; 0000 0042     if (c == '4'){
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0043         PORTC = number(4);
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0044     }
; 0000 0045     if (c == '5'){
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 0046         PORTC = number(5);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 0047     }
; 0000 0048     if (c == '6'){
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0049         PORTC = number(6);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 004A     }
; 0000 004B     if (c == '7'){
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 004C         PORTC = number(7);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 004D     }
; 0000 004E     if (c == '8'){
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 004F         PORTC = number(8);
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0050     }
; 0000 0051     if (c == '9'){
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0052         PORTC = number(9);
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0053     }
; 0000 0054 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;void main(void) {
; 0000 0056 void main(void) {
;PCODE: $000000A5 VOL: 0
; 0000 0057     // Declare your local variables here
; 0000 0058 
; 0000 0059     // Input/Output Ports initialization
; 0000 005A     // Port A initialization
; 0000 005B     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 005C     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 005D     PORTA = 0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 005E     DDRA = 0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 005F 
; 0000 0060     // Port B initialization
; 0000 0061     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0062     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0063     PORTB = 0x0ff;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 0064     DDRB = 0xff;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 0065 
; 0000 0066     // Port C initialization
; 0000 0067     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0068     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0069     PORTC = 0xFF;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 006A     DDRC = 0xFF;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 006B 
; 0000 006C     // Port D initialization
; 0000 006D     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006E     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 006F     PORTD = 0x00;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 0070     DDRD = 0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 0071 
; 0000 0072     // Timer/Counter 0 initialization
; 0000 0073     // Clock source: System Clock
; 0000 0074     // Clock value: Timer 0 Stopped
; 0000 0075     // Mode: Normal top=0xFF
; 0000 0076     // OC0 output: Disconnected
; 0000 0077     TCCR0 = 0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 0078     TCNT0 = 0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0079     OCR0 = 0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 007A 
; 0000 007B     // Timer/Counter 1 initialization
; 0000 007C     // Clock source: System Clock
; 0000 007D     // Clock value: Timer1 Stopped
; 0000 007E     // Mode: Normal top=0xFFFF
; 0000 007F     // OC1A output: Discon.
; 0000 0080     // OC1B output: Discon.
; 0000 0081     // Noise Canceler: Off
; 0000 0082     // Input Capture on Falling Edge
; 0000 0083     // Timer1 Overflow Interrupt: Off
; 0000 0084     // Input Capture Interrupt: Off
; 0000 0085     // Compare A Match Interrupt: Off
; 0000 0086     // Compare B Match Interrupt: Off
; 0000 0087     TCCR1A = 0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 0088     TCCR1B = 0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0089     TCNT1H = 0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 008A     TCNT1L = 0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 008B     ICR1H = 0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 008C     ICR1L = 0x00;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 008D     OCR1AH = 0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 008E     OCR1AL = 0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 008F     OCR1BH = 0x00;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0090     OCR1BL = 0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 0091 
; 0000 0092     // Timer/Counter 2 initialization
; 0000 0093     // Clock source: System Clock
; 0000 0094     // Clock value: Timer2 Stopped
; 0000 0095     // Mode: Normal top=0xFF
; 0000 0096     // OC2 output: Disconnected
; 0000 0097     ASSR = 0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0098     TCCR2 = 0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 0099     TCNT2 = 0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 009A     OCR2 = 0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 009B 
; 0000 009C     // External Interrupt(s) initialization
; 0000 009D     // INT0: Off
; 0000 009E     // INT1: Off
; 0000 009F     // INT2: Off
; 0000 00A0     MCUCR = 0x00;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00A1     MCUCSR = 0x00;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00A2 
; 0000 00A3     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00A4     TIMSK = 0x00;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A5 
; 0000 00A6     // USART initialization
; 0000 00A7     // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00A8     // USART Receiver: On
; 0000 00A9     // USART Transmitter: On
; 0000 00AA     // USART Mode: Asynchronous
; 0000 00AB     // USART Baud Rate: 9600
; 0000 00AC     UCSRA = 0x00;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00AD     UCSRB = 0x18;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00AE     UCSRC = 0x86;
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00AF     UBRRH = 0x00;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00B0     UBRRL = 0x33;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B1 
; 0000 00B2     // Analog Comparator initialization
; 0000 00B3     // Analog Comparator: Off
; 0000 00B4     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00B5     ACSR = 0x80;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
; 0000 00B6     SFIOR = 0x00;
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
; 0000 00B7 
; 0000 00B8     // ADC initialization
; 0000 00B9     // ADC disabled
; 0000 00BA     ADCSRA = 0x00;
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00BB 
; 0000 00BC     // SPI initialization
; 0000 00BD     // SPI disabled
; 0000 00BE     SPCR = 0x00;
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
; 0000 00BF 
; 0000 00C0     // TWI initialization
; 0000 00C1     // TWI disabled
; 0000 00C2     TWCR = 0x00;
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00C3 
; 0000 00C4     // Alphanumeric LCD initialization
; 0000 00C5     // Connections are specified in the
; 0000 00C6     // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00C7     // RS - PORTC Bit 0
; 0000 00C8     // RD - PORTC Bit 1
; 0000 00C9     // EN - PORTC Bit 2
; 0000 00CA     // D4 - PORTC Bit 4
; 0000 00CB     // D5 - PORTC Bit 5
; 0000 00CC     // D6 - PORTC Bit 6
; 0000 00CD     // D7 - PORTC Bit 7
; 0000 00CE     while (1) {
;PCODE: $000000F2 VOL: 0
; 0000 00CF         a = getchar();
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00D0 
; 0000 00D1         numbers_array[count] = a;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 00D2         if (count == 6){
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 00D3             count = 0;
;PCODE: $000000FB VOL: 0
; 0000 00D4         }
; 0000 00D5         count++;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
; 0000 00D6 
; 0000 00D7         if (count > 0) {
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00D8             PORTB = 0b10111111;
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00D9             set_number(numbers_array[0]);
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00DA         }
; 0000 00DB 
; 0000 00DC         if (count > 1) {
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00DD             PORTB = 0b11011111;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00DE             set_number(numbers_array[1]);
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 00DF         }
; 0000 00E0 
; 0000 00E1         if (count > 2) {
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 00E2             PORTB = 0b11101111;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 00E3             set_number(numbers_array[2]);
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00E4         }
; 0000 00E5 
; 0000 00E6         if (count > 3) {
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00E7             PORTB = 0b11110111;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00E8             set_number(numbers_array[3]);
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00E9         }
; 0000 00EA 
; 0000 00EB         if (count > 4) {
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00EC             PORTB = 0b11111011;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00ED             set_number(numbers_array[4]);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00EE         }
; 0000 00EF 
; 0000 00F0          if (count > 5) {
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00F1             PORTB = 0b11111101;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00F2             set_number(numbers_array[5]);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00F3         }
; 0000 00F4     }
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00F5 }
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
