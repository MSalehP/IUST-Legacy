;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;const unsigned char imagee_code[35]=
;{
;    0xFF,    //    0001        # # # # # # # #
;    0x81,    //    0002        # . . . . . . #
;    0xEE,    //    0003        # # # . # # # .
;    0xEE,    //    0004        # # # . # # # .
;    0xEE,    //    0005        # # # . # # # .
;    0x81,    //    0006        # . . . . . . #
;    0xFF,    //    0007        # # # # # # # #
;
;    0x80,    //    0008        # . . . . . . .
;    0xBF,    //    0009        # . # # # # # #
;    0xBF,    //    000A        # . # # # # # #
;    0xBF,    //    000B        # . # # # # # #
;    0xBF,    //    000C        # . # # # # # #
;    0xFF,    //    000D        # # # # # # # #
;    0xFF,    //    000E        # # # # # # # #
;    0xBE,    //    000F        # . # # # # # .
;    0x80,    //    0010        # . . . . . . .
;    0xBE,    //    0011        # . # # # # # .
;    0xFF,	//	0012		# # # # # # # #
;	0xFF,	//	0013		# # # # # # # #
;	0xFF,	//	0014		# # # # # # # #
;	0xFF,	//	0015		# # # # # # # #
;	0xFF,	//	0016		# # # # # # # #
;	0xFF,	//	0017		# # # # # # # #
;	0xFF,	//	0018		# # # # # # # #
;	0xFF,	//	0019		# # # # # # # #
;	0xFF,	//	001A		# # # # # # # #
;	0xFF,	//	001B		# # # # # # # #
;	0xFF,	//	001C		# # # # # # # #
;	0xFF,	//	001D		# # # # # # # #
;	0xFF,	//	001E		# # # # # # # #
;	0xFF,	//	001F		# # # # # # # #
;	0xFF,	//	0020		# # # # # # # #
;	0xFF,	//	0021		# # # # # # # #
;	0xFF,	//	0022		# # # # # # # #
;	0xFF 	//	0023		# # # # # # # #
;};
;
;const unsigned char image_code[35]=
;{
;	0x01,	//	0001		. . . . . . . #
;	0x6D,	//	0002		. # # . # # . #
;	0x6D,	//	0003		. # # . # # . #
;	0x6D,	//	0004		. # # . # # . #
;	0x7D,	//	0005		. # # # # # . #
;	0xFF,	//	0006		# # # # # # # #
;	0x00,	//	0007		. . . . . . . .
;	0xF7,	//	0008		# # # # . # # #
;	0xF7,	//	0009		# # # # . # # #
;	0x0F,	//	000A		. . . . # # # #
;	0xFF,	//	000B		# # # # # # # #
;	0x67,	//	000C		. # # . . # # #
;	0x57,	//	000D		. # . # . # # #
;	0x37,	//	000E		. . # # . # # #
;	0xFF,	//	000F		# # # # # # # #
;	0xBF,	//	0010		# . # # # # # #
;	0x57,	//	0011		. # . # . # # #
;	0x57,	//	0012		. # . # . # # #
;	0x0F,	//	0013		. . . . # # # #
;	0xFF,	//	0014		# # # # # # # #
;	0x07,	//	0015		. . . . . # # #
;	0xF7,	//	0016		# # # # . # # #
;	0xF7,	//	0017		# # # # . # # #
;	0x0F,	//	0018		. . . . # # # #
;	0xFF,	//	0019		# # # # # # # #
;	0xFF,	//	001A		# # # # # # # #
;	0xFF,	//	001B		# # # # # # # #
;	0xFF,	//	001C		# # # # # # # #
;	0xFF,	//	001D		# # # # # # # #
;	0xFF,	//	001E		# # # # # # # #
;	0xFF,	//	001F		# # # # # # # #
;	0xFF,	//	0020		# # # # # # # #
;	0xFF,	//	0021		# # # # # # # #
;	0xFF,	//	0022		# # # # # # # #
;	0xFF 	//	0023		# # # # # # # #
;};
;void main(void)
; 0000 0053 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0054 // Declare your local variables here
; 0000 0055 
; 0000 0056 // Input/Output Ports initialization
; 0000 0057 // Port A initialization
; 0000 0058 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0059 DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 005A // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 005B PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 005C 
; 0000 005D // Port C initialization
; 0000 005E // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 005F DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0060 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0061 PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0062 
; 0000 0063 // Port D initialization
; 0000 0064 // Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out
; 0000 0065 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0066 // State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0
; 0000 0067 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0068 
; 0000 0069 while (1)
;PCODE: $0000001A VOL: 0
; 0000 006A       {
; 0000 006B       unsigned int i, offset = 18;
; 0000 006C       for (; offset < 18 + 35; offset++) {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;	i -> Y+2
;	offset -> Y+0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 006D             int repeat = 0;
; 0000 006E             for (; repeat < 5; repeat++) {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;	i -> Y+4
;	offset -> Y+2
;	repeat -> Y+0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 006F                 unsigned long scan = 1;
; 0000 0070                 PORTA = 0; //C9-C16
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;	i -> Y+8
;	offset -> Y+6
;	repeat -> Y+4
;	scan -> Y+0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0071                 for (i = 0; i < 8; i++) {
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0072                     PORTD = scan & 0xff;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0073                     PORTC = image_code[(offset + i) % 35];
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 0074                     scan <<= 1;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0075                     delay_ms(2);
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0076                 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0077                 PORTD = 0; //C1-C8
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0078                 for (i = 8; i < 16; i++) {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0079                     PORTA = scan >> 8;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 007A                     PORTC = image_code[(offset + i) % 35];
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 007B                     scan <<= 1;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 007C                     delay_ms(2);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 007D                 }
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 007E             }
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 007F       }
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 0080 
; 0000 0081       }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 0082 }
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
