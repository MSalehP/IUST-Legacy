
AVRASM ver. 2.1.30  D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm Sat Jan 16 16:17:04 2021

D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1092): warning: Register r8 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1093): warning: Register r9 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1094): warning: Register r10 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1095): warning: Register r11 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1096): warning: Register r12 already defined by the .DEF directive
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _i1=R4
                 	.DEF _i1_msb=R5
                 	.DEF _j1=R6
                 	.DEF _j1_msb=R7
                 	.DEF _k1=R8
                 	.DEF _k1_msb=R9
                 	.DEF _q1=R10
                 	.DEF _q1_msb=R11
                 	.DEF _i2=R12
                 	.DEF _i2_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0037 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0071 	JMP  _timer1_ovf_isr
000014 940c 0000 	JMP  0x00
000016 940c 0064 	JMP  _timer0_ovf_isr
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
D:\CodeVisionAVR Projects\Exam2\Debug\List\final_exam.asm(1129): warning: .cseg .db misalignment - padding zero byte
00002a 0001      	.DB  0x1
                 _0x4:
00002b 063f
00002c 4f5b
00002d 6d66
00002e 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002f 6f7f      	.DB  0x7F,0x6F
                 
                 __GLOBAL_INI_TBL:
000030 0001      	.DW  0x01
000031 026e      	.DW  _flag2
000032 0054      	.DW  _0x3*2
                 
000033 000a      	.DW  0x0A
000034 0270      	.DW  _seg
000035 0056      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000036 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000037 94f8      	CLI
000038 27ee      	CLR  R30
000039 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003a e0f1      	LDI  R31,1
00003b bffb      	OUT  GICR,R31
00003c bfeb      	OUT  GICR,R30
00003d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00003e e08d      	LDI  R24,(14-2)+1
00003f e0a2      	LDI  R26,2
000040 27bb      	CLR  R27
                 __CLEAR_REG:
000041 93ed      	ST   X+,R30
000042 958a      	DEC  R24
000043 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000044 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000045 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000046 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000047 93ed      	ST   X+,R30
000048 9701      	SBIW R24,1
000049 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004a e6e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004c 9185      	LPM  R24,Z+
00004d 9195      	LPM  R25,Z+
00004e 9700      	SBIW R24,0
00004f f061      	BREQ __GLOBAL_INI_END
000050 91a5      	LPM  R26,Z+
000051 91b5      	LPM  R27,Z+
000052 9005      	LPM  R0,Z+
000053 9015      	LPM  R1,Z+
000054 01bf      	MOVW R22,R30
000055 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000056 9005      	LPM  R0,Z+
000057 920d      	ST   X+,R0
000058 9701      	SBIW R24,1
000059 f7e1      	BRNE __GLOBAL_INI_LOOP
00005a 01fb      	MOVW R30,R22
00005b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005d bfed      	OUT  SPL,R30
00005e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00005f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000060 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000061 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000062 940c 00bf 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;/*
                 ;Danial Bazmandeh
                 ;97521135
                 ;*/
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;int i1 , j1 , k1 , q1 , i2 , j2 , k2 , q2;
                 ;int n = 0 , m = 0;
                 ;int s = 0;
                 ;int flag = 0;
                 ;int flag2 = 1;
                 
                 	.DSEG
                 ;char seg[10]={0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x07,0x7f,0x6f};
                 ;
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void) //1ms
                 ; 0000 0010 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
                 ; .FSTART _timer0_ovf_isr
000064 93ea      	ST   -Y,R30
000065 93fa      	ST   -Y,R31
                 ; 0000 0011     // Reinitialize Timer 0 value
                 ; 0000 0012     TCNT0=0x83;
000066 e8e3      	LDI  R30,LOW(131)
000067 bfe2      	OUT  0x32,R30
                 ; 0000 0013 
                 ; 0000 0014     // Place your code here
                 ; 0000 0015     flag = 1;
000068 e0e1      	LDI  R30,LOW(1)
000069 e0f0      	LDI  R31,HIGH(1)
00006a 93e0 026c 	STS  _flag,R30
00006c 93f0 026d 	STS  _flag+1,R31
                 ; 0000 0016 }
00006e 91f9      	LD   R31,Y+
00006f 91e9      	LD   R30,Y+
000070 9518      	RETI
                 ; .FEND
                 ;
                 ;interrupt [TIM1_OVF] void timer1_ovf_isr(void) //0.5s
                 ; 0000 0019 {
                 _timer1_ovf_isr:
                 ; .FSTART _timer1_ovf_isr
000071 920a      	ST   -Y,R0
000072 921a      	ST   -Y,R1
000073 939a      	ST   -Y,R25
000074 93aa      	ST   -Y,R26
000075 93ba      	ST   -Y,R27
000076 93ea      	ST   -Y,R30
000077 93fa      	ST   -Y,R31
000078 b7ef      	IN   R30,SREG
000079 93ea      	ST   -Y,R30
                 ; 0000 001A     // Reinitialize Timer1 value
                 ; 0000 001B     TCNT1H=0xBDC >> 8;
00007a e0eb      	LDI  R30,LOW(11)
00007b bded      	OUT  0x2D,R30
                 ; 0000 001C     TCNT1L=0xBDC & 0xff;
00007c edec      	LDI  R30,LOW(220)
00007d bdec      	OUT  0x2C,R30
                 ; 0000 001D 
                 ; 0000 001E     // Place your code here
                 ; 0000 001F     if ( flag2 == 0 ) {
00007e 91e0 026e 	LDS  R30,_flag2
000080 91f0 026f 	LDS  R31,_flag2+1
000082 9730      	SBIW R30,0
000083 f589      	BRNE _0x5
                 ; 0000 0020         s++;
000084 e6aa      	LDI  R26,LOW(_s)
000085 e0b2      	LDI  R27,HIGH(_s)
000086 91ed      	LD   R30,X+
000087 91fd      	LD   R31,X+
000088 9631      	ADIW R30,1
000089 93fe      	ST   -X,R31
00008a 93ee      	ST   -X,R30
                 ; 0000 0021         n++;
00008b e6a6      	LDI  R26,LOW(_n)
00008c e0b2      	LDI  R27,HIGH(_n)
00008d 91ed      	LD   R30,X+
00008e 91fd      	LD   R31,X+
00008f 9631      	ADIW R30,1
000090 93fe      	ST   -X,R31
000091 93ee      	ST   -X,R30
                 ; 0000 0022         if (s%2 == 1) m--;
000092 91a0 026a 	LDS  R26,_s
000094 91b0 026b 	LDS  R27,_s+1
000096 e0e2      	LDI  R30,LOW(2)
000097 e0f0      	LDI  R31,HIGH(2)
000098 940e 01c8 	CALL __MODW21
00009a 30e1      	CPI  R30,LOW(0x1)
00009b e0a0      	LDI  R26,HIGH(0x1)
00009c 07fa      	CPC  R31,R26
00009d f439      	BRNE _0x6
00009e e6a8      	LDI  R26,LOW(_m)
00009f e0b2      	LDI  R27,HIGH(_m)
0000a0 91ed      	LD   R30,X+
0000a1 91fd      	LD   R31,X+
0000a2 9731      	SBIW R30,1
0000a3 93fe      	ST   -X,R31
0000a4 93ee      	ST   -X,R30
                 ; 0000 0023         if (n == 10000) n = 0;
                 _0x6:
0000a5 d0c9      	RCALL SUBOPT_0x0
0000a6 31a0      	CPI  R26,LOW(0x2710)
0000a7 e2e7      	LDI  R30,HIGH(0x2710)
0000a8 07be      	CPC  R27,R30
0000a9 f429      	BRNE _0x7
0000aa e0e0      	LDI  R30,LOW(0)
0000ab 93e0 0266 	STS  _n,R30
0000ad 93e0 0267 	STS  _n+1,R30
                 ; 0000 0024         if (m == -1) m = 9999;
                 _0x7:
0000af d0c4      	RCALL SUBOPT_0x1
0000b0 3faf      	CPI  R26,LOW(0xFFFF)
0000b1 efef      	LDI  R30,HIGH(0xFFFF)
0000b2 07be      	CPC  R27,R30
0000b3 f409      	BRNE _0x8
0000b4 d0c4      	RCALL SUBOPT_0x2
                 ; 0000 0025     }
                 _0x8:
                 ; 0000 0026 }
                 _0x5:
0000b5 91e9      	LD   R30,Y+
0000b6 bfef      	OUT  SREG,R30
0000b7 91f9      	LD   R31,Y+
0000b8 91e9      	LD   R30,Y+
0000b9 91b9      	LD   R27,Y+
0000ba 91a9      	LD   R26,Y+
0000bb 9199      	LD   R25,Y+
0000bc 9019      	LD   R1,Y+
0000bd 9009      	LD   R0,Y+
0000be 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void) {
                 ; 0000 0028 void main(void) {
                 _main:
                 ; .FSTART _main
                 ; 0000 0029 
                 ; 0000 002A     DDRB = 0xff;
0000bf efef      	LDI  R30,LOW(255)
0000c0 bbe7      	OUT  0x17,R30
                 ; 0000 002B     PORTB = 0xff;
0000c1 bbe8      	OUT  0x18,R30
                 ; 0000 002C     DDRC = 0xff;
0000c2 bbe4      	OUT  0x14,R30
                 ; 0000 002D     PORTC = 0x3f;
0000c3 e3ef      	LDI  R30,LOW(63)
0000c4 bbe5      	OUT  0x15,R30
                 ; 0000 002E 
                 ; 0000 002F     // Timer Period: 1 ms
                 ; 0000 0030     TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
0000c5 e0e3      	LDI  R30,LOW(3)
0000c6 bfe3      	OUT  0x33,R30
                 ; 0000 0031     TCNT0=0x83;
0000c7 e8e3      	LDI  R30,LOW(131)
0000c8 bfe2      	OUT  0x32,R30
                 ; 0000 0032     OCR0=0x00;
0000c9 e0e0      	LDI  R30,LOW(0)
0000ca bfec      	OUT  0x3C,R30
                 ; 0000 0033 
                 ; 0000 0034     // Timer Period: 0/5 s
                 ; 0000 0035     TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0000cb bdef      	OUT  0x2F,R30
                 ; 0000 0036     TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (1<<CS10);
0000cc e0e3      	LDI  R30,LOW(3)
0000cd bdee      	OUT  0x2E,R30
                 ; 0000 0037     TCNT1H=0x0B;
0000ce e0eb      	LDI  R30,LOW(11)
0000cf bded      	OUT  0x2D,R30
                 ; 0000 0038     TCNT1L=0xDC;
0000d0 edec      	LDI  R30,LOW(220)
0000d1 bdec      	OUT  0x2C,R30
                 ; 0000 0039     ICR1H=0x00;
0000d2 e0e0      	LDI  R30,LOW(0)
0000d3 bde7      	OUT  0x27,R30
                 ; 0000 003A     ICR1L=0x00;
0000d4 bde6      	OUT  0x26,R30
                 ; 0000 003B     OCR1AH=0x00;
0000d5 bdeb      	OUT  0x2B,R30
                 ; 0000 003C     OCR1AL=0x00;
0000d6 bdea      	OUT  0x2A,R30
                 ; 0000 003D     OCR1BH=0x00;
0000d7 bde9      	OUT  0x29,R30
                 ; 0000 003E     OCR1BL=0x00;
0000d8 bde8      	OUT  0x28,R30
                 ; 0000 003F     TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (1<<TOIE1) | (0<<OCIE0) | (1<<TOIE0);
0000d9 e0e5      	LDI  R30,LOW(5)
0000da bfe9      	OUT  0x39,R30
                 ; 0000 0040     #asm("sei")
0000db 9478      	sei
                 ; 0000 0041 
                 ; 0000 0042     while (1) {
                 _0x9:
                 ; 0000 0043         i1 = (n/1000); // hezargan n - samte rast
0000dc d092      	RCALL SUBOPT_0x0
0000dd eee8      	LDI  R30,LOW(1000)
0000de e0f3      	LDI  R31,HIGH(1000)
0000df 940e 01c3 	CALL __DIVW21
0000e1 012f      	MOVW R4,R30
                 ; 0000 0044         j1 = (n/100)%10;
0000e2 d08c      	RCALL SUBOPT_0x0
0000e3 d09c      	RCALL SUBOPT_0x3
0000e4 013f      	MOVW R6,R30
                 ; 0000 0045         k1 = (n/10)%10;
0000e5 d089      	RCALL SUBOPT_0x0
0000e6 d0a3      	RCALL SUBOPT_0x4
0000e7 014f      	MOVW R8,R30
                 ; 0000 0046         q1 = (n%10);
0000e8 d086      	RCALL SUBOPT_0x0
0000e9 e0ea      	LDI  R30,LOW(10)
0000ea e0f0      	LDI  R31,HIGH(10)
0000eb 940e 01c8 	CALL __MODW21
0000ed 015f      	MOVW R10,R30
                 ; 0000 0047         i2 = (m/1000); // hezargan m - samte chap
0000ee d085      	RCALL SUBOPT_0x1
0000ef eee8      	LDI  R30,LOW(1000)
0000f0 e0f3      	LDI  R31,HIGH(1000)
0000f1 940e 01c3 	CALL __DIVW21
0000f3 016f      	MOVW R12,R30
                 ; 0000 0048         j2 = (m/100)%10;
0000f4 d07f      	RCALL SUBOPT_0x1
0000f5 d08a      	RCALL SUBOPT_0x3
0000f6 93e0 0260 	STS  _j2,R30
0000f8 93f0 0261 	STS  _j2+1,R31
                 ; 0000 0049         k2 = (m/10)%10;
0000fa d079      	RCALL SUBOPT_0x1
0000fb d08e      	RCALL SUBOPT_0x4
0000fc 93e0 0262 	STS  _k2,R30
0000fe 93f0 0263 	STS  _k2+1,R31
                 ; 0000 004A         q2 = (m%10);
000100 d073      	RCALL SUBOPT_0x1
000101 e0ea      	LDI  R30,LOW(10)
000102 e0f0      	LDI  R31,HIGH(10)
000103 940e 01c8 	CALL __MODW21
000105 93e0 0264 	STS  _q2,R30
000107 93f0 0265 	STS  _q2+1,R31
                 ; 0000 004B 
                 ; 0000 004C         PORTB = 0b11111111;
000109 efef      	LDI  R30,LOW(255)
00010a bbe8      	OUT  0x18,R30
                 ; 0000 004D         PORTB = 0b11111110;
00010b efee      	LDI  R30,LOW(254)
00010c bbe8      	OUT  0x18,R30
                 ; 0000 004E         PORTC = seg[i2];
00010d e7a0      	LDI  R26,LOW(_seg)
00010e e0b2      	LDI  R27,HIGH(_seg)
00010f 0dac      	ADD  R26,R12
000110 1dbd      	ADC  R27,R13
000111 d082      	RCALL SUBOPT_0x5
                 ; 0000 004F 
                 ; 0000 0050         flag=0;
                 ; 0000 0051         while (flag != 1);
                 _0xC:
000112 d089      	RCALL SUBOPT_0x6
000113 f7f1      	BRNE _0xC
                 ; 0000 0052 
                 ; 0000 0053         PORTB = 0b11111111;
000114 efef      	LDI  R30,LOW(255)
000115 bbe8      	OUT  0x18,R30
                 ; 0000 0054         PORTB = 0b11111101;
000116 efed      	LDI  R30,LOW(253)
000117 bbe8      	OUT  0x18,R30
                 ; 0000 0055         PORTC = seg[j2];
000118 91e0 0260 	LDS  R30,_j2
00011a 91f0 0261 	LDS  R31,_j2+1
00011c d085      	RCALL SUBOPT_0x7
                 ; 0000 0056 
                 ; 0000 0057         flag=0;
                 ; 0000 0058         while (flag != 1);
                 _0xF:
00011d d07e      	RCALL SUBOPT_0x6
00011e f7f1      	BRNE _0xF
                 ; 0000 0059 
                 ; 0000 005A         PORTB = 0b11111111;
00011f efef      	LDI  R30,LOW(255)
000120 bbe8      	OUT  0x18,R30
                 ; 0000 005B         PORTB = 0b11111011;
000121 efeb      	LDI  R30,LOW(251)
000122 bbe8      	OUT  0x18,R30
                 ; 0000 005C         PORTC = seg[k2];
000123 91e0 0262 	LDS  R30,_k2
000125 91f0 0263 	LDS  R31,_k2+1
000127 d07a      	RCALL SUBOPT_0x7
                 ; 0000 005D 
                 ; 0000 005E         flag=0;
                 ; 0000 005F         while (flag != 1);
                 _0x12:
000128 d073      	RCALL SUBOPT_0x6
000129 f7f1      	BRNE _0x12
                 ; 0000 0060 
                 ; 0000 0061         PORTB = 0b11111111;
00012a efef      	LDI  R30,LOW(255)
00012b bbe8      	OUT  0x18,R30
                 ; 0000 0062         PORTB = 0b11110111;
00012c efe7      	LDI  R30,LOW(247)
00012d bbe8      	OUT  0x18,R30
                 ; 0000 0063         PORTC = seg[q2];
00012e 91e0 0264 	LDS  R30,_q2
000130 91f0 0265 	LDS  R31,_q2+1
000132 d06f      	RCALL SUBOPT_0x7
                 ; 0000 0064 
                 ; 0000 0065         flag=0;
                 ; 0000 0066         while (flag != 1);
                 _0x15:
000133 d068      	RCALL SUBOPT_0x6
000134 f7f1      	BRNE _0x15
                 ; 0000 0067 
                 ; 0000 0068         PORTB = 0b11111111;
000135 efef      	LDI  R30,LOW(255)
000136 bbe8      	OUT  0x18,R30
                 ; 0000 0069         PORTB = 0b11101111;
000137 eeef      	LDI  R30,LOW(239)
000138 bbe8      	OUT  0x18,R30
                 ; 0000 006A         PORTC = seg[i1];
000139 e7a0      	LDI  R26,LOW(_seg)
00013a e0b2      	LDI  R27,HIGH(_seg)
00013b 0da4      	ADD  R26,R4
00013c 1db5      	ADC  R27,R5
00013d d056      	RCALL SUBOPT_0x5
                 ; 0000 006B 
                 ; 0000 006C         flag=0;
                 ; 0000 006D         while (flag != 1);
                 _0x18:
00013e d05d      	RCALL SUBOPT_0x6
00013f f7f1      	BRNE _0x18
                 ; 0000 006E 
                 ; 0000 006F         PORTB = 0b11111111;
000140 efef      	LDI  R30,LOW(255)
000141 bbe8      	OUT  0x18,R30
                 ; 0000 0070         PORTB = 0b11011111;
000142 edef      	LDI  R30,LOW(223)
000143 bbe8      	OUT  0x18,R30
                 ; 0000 0071         PORTC = seg[j1];
000144 e7a0      	LDI  R26,LOW(_seg)
000145 e0b2      	LDI  R27,HIGH(_seg)
000146 0da6      	ADD  R26,R6
000147 1db7      	ADC  R27,R7
000148 d04b      	RCALL SUBOPT_0x5
                 ; 0000 0072 
                 ; 0000 0073         flag=0;
                 ; 0000 0074         while (flag != 1);
                 _0x1B:
000149 d052      	RCALL SUBOPT_0x6
00014a f7f1      	BRNE _0x1B
                 ; 0000 0075 
                 ; 0000 0076         PORTB = 0b11111111;
00014b efef      	LDI  R30,LOW(255)
00014c bbe8      	OUT  0x18,R30
                 ; 0000 0077         PORTB = 0b10111111;
00014d ebef      	LDI  R30,LOW(191)
00014e bbe8      	OUT  0x18,R30
                 ; 0000 0078         PORTC = seg[k1];
00014f e7a0      	LDI  R26,LOW(_seg)
000150 e0b2      	LDI  R27,HIGH(_seg)
000151 0da8      	ADD  R26,R8
000152 1db9      	ADC  R27,R9
000153 d040      	RCALL SUBOPT_0x5
                 ; 0000 0079 
                 ; 0000 007A         flag=0;
                 ; 0000 007B         while (flag != 1);
                 _0x1E:
000154 d047      	RCALL SUBOPT_0x6
000155 f7f1      	BRNE _0x1E
                 ; 0000 007C 
                 ; 0000 007D         PORTB = 0b11111111;
000156 efef      	LDI  R30,LOW(255)
000157 bbe8      	OUT  0x18,R30
                 ; 0000 007E         PORTB = 0b01111111;
000158 e7ef      	LDI  R30,LOW(127)
000159 bbe8      	OUT  0x18,R30
                 ; 0000 007F         PORTC = seg[q1];
00015a e7a0      	LDI  R26,LOW(_seg)
00015b e0b2      	LDI  R27,HIGH(_seg)
00015c 0daa      	ADD  R26,R10
00015d 1dbb      	ADC  R27,R11
00015e d035      	RCALL SUBOPT_0x5
                 ; 0000 0080 
                 ; 0000 0081         flag=0;
                 ; 0000 0082         while (flag != 1);
                 _0x21:
00015f d03c      	RCALL SUBOPT_0x6
000160 f7f1      	BRNE _0x21
                 ; 0000 0083 
                 ; 0000 0084         if ( flag2 == 1 ) {
000161 91a0 026e 	LDS  R26,_flag2
000163 91b0 026f 	LDS  R27,_flag2+1
000165 9711      	SBIW R26,1
000166 f431      	BRNE _0x24
                 ; 0000 0085             m = 9999;
000167 d011      	RCALL SUBOPT_0x2
                 ; 0000 0086             flag2 = 0;
000168 e0e0      	LDI  R30,LOW(0)
000169 93e0 026e 	STS  _flag2,R30
00016b 93e0 026f 	STS  _flag2+1,R30
                 ; 0000 0087         }
                 ; 0000 0088     }
                 _0x24:
00016d cf6e      	RJMP _0x9
                 ; 0000 0089 }
                 _0x25:
00016e cfff      	RJMP _0x25
                 ; .FEND
                 
                 	.DSEG
                 _j2:
000260           	.BYTE 0x2
                 _k2:
000262           	.BYTE 0x2
                 _q2:
000264           	.BYTE 0x2
                 _n:
000266           	.BYTE 0x2
                 _m:
000268           	.BYTE 0x2
                 _s:
00026a           	.BYTE 0x2
                 _flag:
00026c           	.BYTE 0x2
                 _flag2:
00026e           	.BYTE 0x2
                 _seg:
000270           	.BYTE 0xA
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x0:
00016f 91a0 0266 	LDS  R26,_n
000171 91b0 0267 	LDS  R27,_n+1
000173 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
000174 91a0 0268 	LDS  R26,_m
000176 91b0 0269 	LDS  R27,_m+1
000178 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000179 e0ef      	LDI  R30,LOW(9999)
00017a e2f7      	LDI  R31,HIGH(9999)
00017b 93e0 0268 	STS  _m,R30
00017d 93f0 0269 	STS  _m+1,R31
00017f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x3:
000180 e6e4      	LDI  R30,LOW(100)
000181 e0f0      	LDI  R31,HIGH(100)
000182 940e 01c3 	CALL __DIVW21
000184 01df      	MOVW R26,R30
000185 e0ea      	LDI  R30,LOW(10)
000186 e0f0      	LDI  R31,HIGH(10)
000187 940e 01c8 	CALL __MODW21
000189 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
00018a e0ea      	LDI  R30,LOW(10)
00018b e0f0      	LDI  R31,HIGH(10)
00018c 940e 01c3 	CALL __DIVW21
00018e 01df      	MOVW R26,R30
00018f e0ea      	LDI  R30,LOW(10)
000190 e0f0      	LDI  R31,HIGH(10)
000191 940e 01c8 	CALL __MODW21
000193 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:17 WORDS
                 SUBOPT_0x5:
000194 91ec      	LD   R30,X
000195 bbe5      	OUT  0x15,R30
000196 e0e0      	LDI  R30,LOW(0)
000197 93e0 026c 	STS  _flag,R30
000199 93e0 026d 	STS  _flag+1,R30
00019b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x6:
00019c 91a0 026c 	LDS  R26,_flag
00019e 91b0 026d 	LDS  R27,_flag+1
0001a0 9711      	SBIW R26,1
0001a1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x7:
0001a2 59e0      	SUBI R30,LOW(-_seg)
0001a3 4ffd      	SBCI R31,HIGH(-_seg)
0001a4 81e0      	LD   R30,Z
0001a5 bbe5      	OUT  0x15,R30
0001a6 e0e0      	LDI  R30,LOW(0)
0001a7 93e0 026c 	STS  _flag,R30
0001a9 93e0 026d 	STS  _flag+1,R30
0001ab 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
0001ac 95f1      	NEG  R31
0001ad 95e1      	NEG  R30
0001ae 40f0      	SBCI R31,0
0001af 9508      	RET
                 
                 __DIVW21U:
0001b0 2400      	CLR  R0
0001b1 2411      	CLR  R1
0001b2 e190      	LDI  R25,16
                 __DIVW21U1:
0001b3 0faa      	LSL  R26
0001b4 1fbb      	ROL  R27
0001b5 1c00      	ROL  R0
0001b6 1c11      	ROL  R1
0001b7 1a0e      	SUB  R0,R30
0001b8 0a1f      	SBC  R1,R31
0001b9 f418      	BRCC __DIVW21U2
0001ba 0e0e      	ADD  R0,R30
0001bb 1e1f      	ADC  R1,R31
0001bc c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001bd 60a1      	SBR  R26,1
                 __DIVW21U3:
0001be 959a      	DEC  R25
0001bf f799      	BRNE __DIVW21U1
0001c0 01fd      	MOVW R30,R26
0001c1 01d0      	MOVW R26,R0
0001c2 9508      	RET
                 
                 __DIVW21:
0001c3 d012      	RCALL __CHKSIGNW
0001c4 dfeb      	RCALL __DIVW21U
0001c5 f40e      	BRTC __DIVW211
0001c6 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0001c7 9508      	RET
                 
                 __MODW21:
0001c8 94e8      	CLT
0001c9 ffb7      	SBRS R27,7
0001ca c004      	RJMP __MODW211
0001cb 95a0      	COM  R26
0001cc 95b0      	COM  R27
0001cd 9611      	ADIW R26,1
0001ce 9468      	SET
                 __MODW211:
0001cf fdf7      	SBRC R31,7
0001d0 dfdb      	RCALL __ANEGW1
0001d1 dfde      	RCALL __DIVW21U
0001d2 01fd      	MOVW R30,R26
0001d3 f40e      	BRTC __MODW212
0001d4 dfd7      	RCALL __ANEGW1
                 __MODW212:
0001d5 9508      	RET
                 
                 __CHKSIGNW:
0001d6 94e8      	CLT
0001d7 fff7      	SBRS R31,7
0001d8 c002      	RJMP __CHKSW1
0001d9 dfd2      	RCALL __ANEGW1
0001da 9468      	SET
                 __CHKSW1:
0001db ffb7      	SBRS R27,7
0001dc c006      	RJMP __CHKSW2
0001dd 95a0      	COM  R26
0001de 95b0      	COM  R27
0001df 9611      	ADIW R26,1
0001e0 f800      	BLD  R0,0
0001e1 9403      	INC  R0
0001e2 fa00      	BST  R0,0
                 __CHKSW2:
0001e3 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  14 r1 :   7 r2 :   0 r3 :   0 r4 :   2 r5 :   1 r6 :   2 r7 :   1 
r8 :   2 r9 :   1 r10:   2 r11:   1 r12:   2 r13:   1 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   7 r25:   6 r26:  40 r27:  29 r28:   1 r29:   1 r30: 152 r31:  41 
x  :  16 y  :  20 z  :   8 
Registers used: 24 out of 35 (68.6%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   6 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  17 brpl  :   0 brsh  :   0 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :   9 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   4 
cp    :   0 cpc   :   3 cpi   :   3 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   1 jmp   :  22 ld    :  18 ldd   :   0 ldi   :  87 
lds   :  18 lpm   :   7 lsl   :   1 lsr   :   0 mov   :   0 movw  :  13 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   0 out   :  46 pop   :   0 push  :   0 rcall :  39 ret   :  13 
reti  :   2 rjmp  :   7 rol   :   3 ror   :   0 sbc   :   1 sbci  :   2 
sbi   :   0 sbic  :   0 sbis  :   0 sbiw  :   7 sbr   :   1 sbrc  :   1 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :   0 sts   :  18 sub   :   1 subi  :   1 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 45 out of 116 (38.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0003c8    942     26    968   32768   3.0%
[.dseg] 0x000060 0x00027a      0     26     26    2048   1.3%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 11 warnings
