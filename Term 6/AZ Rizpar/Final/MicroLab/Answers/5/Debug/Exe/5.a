;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;#include <stdbool.h>
;
;void usart_send_string(char *str);
;void main(void)
; 0000 0008 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0009 
; 0000 000A int switchNumber;
; 0000 000B int checker;
; 0000 000C bool counter = false;
; 0000 000D 
; 0000 000E DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
;	switchNumber -> R16,R17
;	checker -> R18,R19
;	counter -> R21
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 000F PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0010 
; 0000 0011 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0012 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0013 
; 0000 0014 // Timer/Counter 0 initialization
; 0000 0015 // Clock source: System Clock
; 0000 0016 // Clock value: Timer 0 Stopped
; 0000 0017 // Mode: Normal top=0xFF
; 0000 0018 // OC0 output: Disconnected
; 0000 0019 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 001A TCNT0=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 001B OCR0=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 001C 
; 0000 001D // Timer/Counter 1 initialization
; 0000 001E // Clock source: System Clock
; 0000 001F // Clock value: Timer1 Stopped
; 0000 0020 // Mode: Normal top=0xFFFF
; 0000 0021 // OC1A output: Disconnected
; 0000 0022 // OC1B output: Disconnected
; 0000 0023 // Noise Canceler: Off
; 0000 0024 // Input Capture on Falling Edge
; 0000 0025 // Timer1 Overflow Interrupt: Off
; 0000 0026 // Input Capture Interrupt: Off
; 0000 0027 // Compare A Match Interrupt: Off
; 0000 0028 // Compare B Match Interrupt: Off
; 0000 0029 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002A TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002B TCNT1H=0x00;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002C TCNT1L=0x00;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 002D ICR1H=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 002E ICR1L=0x00;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 002F OCR1AH=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0030 OCR1AL=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0031 OCR1BH=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0032 OCR1BL=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0033 
; 0000 0034 // Timer/Counter 2 initialization
; 0000 0035 // Clock source: System Clock
; 0000 0036 // Clock value: Timer2 Stopped
; 0000 0037 // Mode: Normal top=0xFF
; 0000 0038 // OC2 output: Disconnected
; 0000 0039 ASSR=0<<AS2;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003A TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 003B TCNT2=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003C OCR2=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 003D 
; 0000 003E // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 003F TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0040 
; 0000 0041 // External Interrupt(s) initialization
; 0000 0042 // INT0: Off
; 0000 0043 // INT1: Off
; 0000 0044 // INT2: Off
; 0000 0045 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0046 MCUCSR=(0<<ISC2);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0047 
; 0000 0048 // USART initialization
; 0000 0049 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 004A // USART Receiver: On
; 0000 004B // USART Transmitter: On
; 0000 004C // USART Mode: Asynchronous
; 0000 004D // USART Baud Rate: 9600
; 0000 004E UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004F UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0050 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0051 UBRRH=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0052 UBRRL=0x33;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0053 
; 0000 0054 // Analog Comparator initialization
; 0000 0055 // Analog Comparator: Off
; 0000 0056 // The Analog Comparator's positive input is
; 0000 0057 // connected to the AIN0 pin
; 0000 0058 // The Analog Comparator's negative input is
; 0000 0059 // connected to the AIN1 pin
; 0000 005A ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 005B SFIOR=(0<<ACME);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 005C 
; 0000 005D // ADC initialization
; 0000 005E // ADC disabled
; 0000 005F ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0060 
; 0000 0061 // SPI initialization
; 0000 0062 // SPI disabled
; 0000 0063 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0064 
; 0000 0065 // TWI initialization
; 0000 0066 // TWI disabled
; 0000 0067 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0068 
; 0000 0069 
; 0000 006A 
; 0000 006B while (1)
;PCODE: $00000054 VOL: 0
; 0000 006C     {
; 0000 006D         if(!counter) {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 006E             usart_send_string("\r\n In the name of God\r\n");
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 006F             counter=true ;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0070             switchNumber = PINC;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0071             checker = switchNumber;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0072             printf("number = %03d \n\r",switchNumber);
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0073         }
; 0000 0074         switchNumber = PINC;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0075         if(switchNumber != checker)
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0076         {
; 0000 0077             checker = switchNumber;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0078             printf("number = %03d \n\r",switchNumber);
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0079         }
; 0000 007A 
; 0000 007B     }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 007C }
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0

	.DSEG
_0x7:
	.BYTE 0x18
;void usart_send_string(char *str)
; 0000 007E {

	.CSEG
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 007F     unsigned char i = 0;
; 0000 0080     for(i=0;str[i];i++)
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;	*str -> Y+1
;	i -> R17
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 0081     putchar(str[i]);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0082 }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
