
AVRASM ver. 2.1.30  C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm Sat Jan 06 12:38:32 2024

C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1088): warning: Register r5 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1089): warning: Register r4 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1090): warning: Register r7 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1091): warning: Register r6 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1092): warning: Register r9 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1093): warning: Register r8 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1094): warning: Register r11 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1095): warning: Register r12 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\21,22\Debug\List\21.asm(1096): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _a=R5
                 	.DEF _counter1=R4
                 	.DEF _counter2=R7
                 	.DEF _counter3=R6
                 	.DEF _counter4=R9
                 	.DEF _counter5=R8
                 	.DEF _counter6=R11
                 	.DEF _idx=R12
                 	.DEF _idx_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 003b 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 00dd 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000033 0061
000034 6161      	.DB  0x61,0x0,0x61,0x61
000035 6161
000036 6200      	.DB  0x61,0x61,0x0,0x62
                 
                 
                 __GLOBAL_INI_TBL:
000037 0008      	.DW  0x08
000038 0004      	.DW  0x04
000039 0066      	.DW  __REG_VARS*2
                 
                 _0xFFFFFFFF:
00003a 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00003b 94f8      	CLI
00003c 27ee      	CLR  R30
00003d bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003e e0f1      	LDI  R31,1
00003f bffb      	OUT  GICR,R31
000040 bfeb      	OUT  GICR,R30
000041 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000042 e08d      	LDI  R24,(14-2)+1
000043 e0a2      	LDI  R26,2
000044 27bb      	CLR  R27
                 __CLEAR_REG:
000045 93ed      	ST   X+,R30
000046 958a      	DEC  R24
000047 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000048 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000049 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00004a e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00004b 93ed      	ST   X+,R30
00004c 9701      	SBIW R24,1
00004d f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004e e6ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004f e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000050 9185      	LPM  R24,Z+
000051 9195      	LPM  R25,Z+
000052 9700      	SBIW R24,0
000053 f061      	BREQ __GLOBAL_INI_END
000054 91a5      	LPM  R26,Z+
000055 91b5      	LPM  R27,Z+
000056 9005      	LPM  R0,Z+
000057 9015      	LPM  R1,Z+
000058 01bf      	MOVW R22,R30
000059 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00005a 9005      	LPM  R0,Z+
00005b 920d      	ST   X+,R0
00005c 9701      	SBIW R24,1
00005d f7e1      	BRNE __GLOBAL_INI_LOOP
00005e 01fb      	MOVW R30,R22
00005f cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000060 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000061 bfed      	OUT  SPL,R30
000062 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000063 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000064 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000065 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000066 940c 0135 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;// Declare your global variables here
                 ;char a;
                 ;char counter1='a', counter2='a', counter3='a', counter4='a', counter5='a', counter6='b' ;
                 ;int idx, idx2 ;
                 ;//int delay = 0;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;unsigned char number (unsigned char digit) {
                 ; 0000 000B unsigned char number (unsigned char digit) {
                 
                 	.CSEG
                 _number:
                 ; .FSTART _number
                 ; 0000 000C     if (digit == 0) {
000068 93aa      	ST   -Y,R26
                 ;	digit -> Y+0
000069 81e8      	LD   R30,Y
00006a 30e0      	CPI  R30,0
00006b f411      	BRNE _0x3
                 ; 0000 000D         return 0x3F;
00006c e3ef      	LDI  R30,LOW(63)
00006d c06d      	RJMP _0x2060001
                 ; 0000 000E     }
                 ; 0000 000F     if (digit == 1) {
                 _0x3:
00006e 81a8      	LD   R26,Y
00006f 30a1      	CPI  R26,LOW(0x1)
000070 f411      	BRNE _0x4
                 ; 0000 0010         return 0x06;
000071 e0e6      	LDI  R30,LOW(6)
000072 c068      	RJMP _0x2060001
                 ; 0000 0011     }
                 ; 0000 0012     if (digit == 2) {
                 _0x4:
000073 81a8      	LD   R26,Y
000074 30a2      	CPI  R26,LOW(0x2)
000075 f411      	BRNE _0x5
                 ; 0000 0013         return 0x5B;
000076 e5eb      	LDI  R30,LOW(91)
000077 c063      	RJMP _0x2060001
                 ; 0000 0014     }
                 ; 0000 0015     if (digit == 3) {
                 _0x5:
000078 81a8      	LD   R26,Y
000079 30a3      	CPI  R26,LOW(0x3)
00007a f411      	BRNE _0x6
                 ; 0000 0016         return 0x4F;
00007b e4ef      	LDI  R30,LOW(79)
00007c c05e      	RJMP _0x2060001
                 ; 0000 0017     }
                 ; 0000 0018     if (digit == 4) {
                 _0x6:
00007d 81a8      	LD   R26,Y
00007e 30a4      	CPI  R26,LOW(0x4)
00007f f411      	BRNE _0x7
                 ; 0000 0019         return 0x66;
000080 e6e6      	LDI  R30,LOW(102)
000081 c059      	RJMP _0x2060001
                 ; 0000 001A     }
                 ; 0000 001B     if (digit == 5) {
                 _0x7:
000082 81a8      	LD   R26,Y
000083 30a5      	CPI  R26,LOW(0x5)
000084 f411      	BRNE _0x8
                 ; 0000 001C         return 0x6D;
000085 e6ed      	LDI  R30,LOW(109)
000086 c054      	RJMP _0x2060001
                 ; 0000 001D     }
                 ; 0000 001E     if (digit == 6) {
                 _0x8:
000087 81a8      	LD   R26,Y
000088 30a6      	CPI  R26,LOW(0x6)
000089 f411      	BRNE _0x9
                 ; 0000 001F         return 0x7D;
00008a e7ed      	LDI  R30,LOW(125)
00008b c04f      	RJMP _0x2060001
                 ; 0000 0020     }
                 ; 0000 0021     if (digit == 7) {
                 _0x9:
00008c 81a8      	LD   R26,Y
00008d 30a7      	CPI  R26,LOW(0x7)
00008e f411      	BRNE _0xA
                 ; 0000 0022         return 0x07;
00008f e0e7      	LDI  R30,LOW(7)
000090 c04a      	RJMP _0x2060001
                 ; 0000 0023     }
                 ; 0000 0024     if (digit == 8) {
                 _0xA:
000091 81a8      	LD   R26,Y
000092 30a8      	CPI  R26,LOW(0x8)
000093 f411      	BRNE _0xB
                 ; 0000 0025         return 0x7F;
000094 e7ef      	LDI  R30,LOW(127)
000095 c045      	RJMP _0x2060001
                 ; 0000 0026     }
                 ; 0000 0027     if (digit == 9) {
                 _0xB:
000096 81a8      	LD   R26,Y
000097 30a9      	CPI  R26,LOW(0x9)
000098 f411      	BRNE _0xC
                 ; 0000 0028         return 0x6F;
000099 e6ef      	LDI  R30,LOW(111)
00009a c040      	RJMP _0x2060001
                 ; 0000 0029     }
                 ; 0000 002A }
                 _0xC:
00009b c03f      	RJMP _0x2060001
                 ; .FEND
                 ;
                 ;void set_number(char c){
                 ; 0000 002C void set_number(char c){
                 _set_number:
                 ; .FSTART _set_number
                 ; 0000 002D     if (c == '0'){
00009c 93aa      	ST   -Y,R26
                 ;	c -> Y+0
00009d 81a8      	LD   R26,Y
00009e 33a0      	CPI  R26,LOW(0x30)
00009f f419      	BRNE _0xD
                 ; 0000 002E         PORTC = number(0);
0000a0 e0a0      	LDI  R26,LOW(0)
0000a1 dfc6      	RCALL _number
0000a2 c037      	RJMP _0x31
                 ; 0000 002F     }
                 ; 0000 0030     else if (c == '1'){
                 _0xD:
0000a3 81a8      	LD   R26,Y
0000a4 33a1      	CPI  R26,LOW(0x31)
0000a5 f419      	BRNE _0xF
                 ; 0000 0031         PORTC = number(1);
0000a6 e0a1      	LDI  R26,LOW(1)
0000a7 dfc0      	RCALL _number
0000a8 c031      	RJMP _0x31
                 ; 0000 0032     }
                 ; 0000 0033     else if (c == '2'){
                 _0xF:
0000a9 81a8      	LD   R26,Y
0000aa 33a2      	CPI  R26,LOW(0x32)
0000ab f419      	BRNE _0x11
                 ; 0000 0034         PORTC = number(2);
0000ac e0a2      	LDI  R26,LOW(2)
0000ad dfba      	RCALL _number
0000ae c02b      	RJMP _0x31
                 ; 0000 0035     }
                 ; 0000 0036     else if (c == '3'){
                 _0x11:
0000af 81a8      	LD   R26,Y
0000b0 33a3      	CPI  R26,LOW(0x33)
0000b1 f419      	BRNE _0x13
                 ; 0000 0037         PORTC = number(3);
0000b2 e0a3      	LDI  R26,LOW(3)
0000b3 dfb4      	RCALL _number
0000b4 c025      	RJMP _0x31
                 ; 0000 0038     }
                 ; 0000 0039     else if (c == '4'){
                 _0x13:
0000b5 81a8      	LD   R26,Y
0000b6 33a4      	CPI  R26,LOW(0x34)
0000b7 f419      	BRNE _0x15
                 ; 0000 003A         PORTC = number(4);
0000b8 e0a4      	LDI  R26,LOW(4)
0000b9 dfae      	RCALL _number
0000ba c01f      	RJMP _0x31
                 ; 0000 003B     }
                 ; 0000 003C     else if (c == '5'){
                 _0x15:
0000bb 81a8      	LD   R26,Y
0000bc 33a5      	CPI  R26,LOW(0x35)
0000bd f419      	BRNE _0x17
                 ; 0000 003D         PORTC = number(5);
0000be e0a5      	LDI  R26,LOW(5)
0000bf dfa8      	RCALL _number
0000c0 c019      	RJMP _0x31
                 ; 0000 003E     }
                 ; 0000 003F     else if (c == '6'){
                 _0x17:
0000c1 81a8      	LD   R26,Y
0000c2 33a6      	CPI  R26,LOW(0x36)
0000c3 f419      	BRNE _0x19
                 ; 0000 0040         PORTC = number(6);
0000c4 e0a6      	LDI  R26,LOW(6)
0000c5 dfa2      	RCALL _number
0000c6 c013      	RJMP _0x31
                 ; 0000 0041     }
                 ; 0000 0042     else if (c == '7'){
                 _0x19:
0000c7 81a8      	LD   R26,Y
0000c8 33a7      	CPI  R26,LOW(0x37)
0000c9 f419      	BRNE _0x1B
                 ; 0000 0043         PORTC = number(7);
0000ca e0a7      	LDI  R26,LOW(7)
0000cb df9c      	RCALL _number
0000cc c00d      	RJMP _0x31
                 ; 0000 0044     }
                 ; 0000 0045     else if (c == '8'){
                 _0x1B:
0000cd 81a8      	LD   R26,Y
0000ce 33a8      	CPI  R26,LOW(0x38)
0000cf f419      	BRNE _0x1D
                 ; 0000 0046         PORTC = number(8);
0000d0 e0a8      	LDI  R26,LOW(8)
0000d1 df96      	RCALL _number
0000d2 c007      	RJMP _0x31
                 ; 0000 0047     }
                 ; 0000 0048     else if (c == '9'){
                 _0x1D:
0000d3 81a8      	LD   R26,Y
0000d4 33a9      	CPI  R26,LOW(0x39)
0000d5 f419      	BRNE _0x1F
                 ; 0000 0049         PORTC = number(9);
0000d6 e0a9      	LDI  R26,LOW(9)
0000d7 df90      	RCALL _number
0000d8 c001      	RJMP _0x31
                 ; 0000 004A     }
                 ; 0000 004B     else {
                 _0x1F:
                 ; 0000 004C         PORTC = 0x00;
0000d9 e0e0      	LDI  R30,LOW(0)
                 _0x31:
0000da bbe5      	OUT  0x15,R30
                 ; 0000 004D     }
                 ; 0000 004E }
                 _0x2060001:
0000db 9621      	ADIW R28,1
0000dc 9508      	RET
                 ; .FEND
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0052 {
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
0000dd 920a      	ST   -Y,R0
0000de 921a      	ST   -Y,R1
0000df 92fa      	ST   -Y,R15
0000e0 936a      	ST   -Y,R22
0000e1 937a      	ST   -Y,R23
0000e2 938a      	ST   -Y,R24
0000e3 939a      	ST   -Y,R25
0000e4 93aa      	ST   -Y,R26
0000e5 93ba      	ST   -Y,R27
0000e6 93ea      	ST   -Y,R30
0000e7 93fa      	ST   -Y,R31
0000e8 b7ef      	IN   R30,SREG
0000e9 93ea      	ST   -Y,R30
                 ; 0000 0053 // Place your code here
                 ; 0000 0054     idx++;
0000ea 01f6      	MOVW R30,R12
0000eb 9631      	ADIW R30,1
0000ec 016f      	MOVW R12,R30
                 ; 0000 0055     idx = idx % 6;
0000ed 01d6      	MOVW R26,R12
0000ee e0e6      	LDI  R30,LOW(6)
0000ef e0f0      	LDI  R31,HIGH(6)
0000f0 940e 01ad 	CALL __MODW21
0000f2 016f      	MOVW R12,R30
                 ; 0000 0056     if (idx == 0) {
0000f3 2c0c      	MOV  R0,R12
0000f4 280d      	OR   R0,R13
0000f5 f421      	BRNE _0x21
                 ; 0000 0057         PORTB = 0b10111111;
0000f6 ebef      	LDI  R30,LOW(191)
0000f7 bbe8      	OUT  0x18,R30
                 ; 0000 0058         set_number(counter1);
0000f8 2da4      	MOV  R26,R4
0000f9 dfa2      	RCALL _set_number
                 ; 0000 0059     }
                 ; 0000 005A 
                 ; 0000 005B     if (idx == 1) {
                 _0x21:
0000fa e0e1      	LDI  R30,LOW(1)
0000fb e0f0      	LDI  R31,HIGH(1)
0000fc 15ec      	CP   R30,R12
0000fd 05fd      	CPC  R31,R13
0000fe f421      	BRNE _0x22
                 ; 0000 005C         PORTB = 0b11011111;
0000ff edef      	LDI  R30,LOW(223)
000100 bbe8      	OUT  0x18,R30
                 ; 0000 005D         set_number(counter2);
000101 2da7      	MOV  R26,R7
000102 df99      	RCALL _set_number
                 ; 0000 005E     }
                 ; 0000 005F 
                 ; 0000 0060     if (idx == 2) {
                 _0x22:
000103 e0e2      	LDI  R30,LOW(2)
000104 e0f0      	LDI  R31,HIGH(2)
000105 15ec      	CP   R30,R12
000106 05fd      	CPC  R31,R13
000107 f421      	BRNE _0x23
                 ; 0000 0061         PORTB = 0b11101111;
000108 eeef      	LDI  R30,LOW(239)
000109 bbe8      	OUT  0x18,R30
                 ; 0000 0062         set_number(counter3);
00010a 2da6      	MOV  R26,R6
00010b df90      	RCALL _set_number
                 ; 0000 0063     }
                 ; 0000 0064 
                 ; 0000 0065     if (idx == 3) {
                 _0x23:
00010c e0e3      	LDI  R30,LOW(3)
00010d e0f0      	LDI  R31,HIGH(3)
00010e 15ec      	CP   R30,R12
00010f 05fd      	CPC  R31,R13
000110 f421      	BRNE _0x24
                 ; 0000 0066         PORTB = 0b11110111;
000111 efe7      	LDI  R30,LOW(247)
000112 bbe8      	OUT  0x18,R30
                 ; 0000 0067         set_number(counter4);
000113 2da9      	MOV  R26,R9
000114 df87      	RCALL _set_number
                 ; 0000 0068     }
                 ; 0000 0069 
                 ; 0000 006A     if (idx == 4) {
                 _0x24:
000115 e0e4      	LDI  R30,LOW(4)
000116 e0f0      	LDI  R31,HIGH(4)
000117 15ec      	CP   R30,R12
000118 05fd      	CPC  R31,R13
000119 f421      	BRNE _0x25
                 ; 0000 006B         PORTB = 0b11111011;
00011a efeb      	LDI  R30,LOW(251)
00011b bbe8      	OUT  0x18,R30
                 ; 0000 006C         set_number(counter5);
00011c 2da8      	MOV  R26,R8
00011d df7e      	RCALL _set_number
                 ; 0000 006D     }
                 ; 0000 006E 
                 ; 0000 006F      if (idx == 5) {
                 _0x25:
00011e e0e5      	LDI  R30,LOW(5)
00011f e0f0      	LDI  R31,HIGH(5)
000120 15ec      	CP   R30,R12
000121 05fd      	CPC  R31,R13
000122 f421      	BRNE _0x26
                 ; 0000 0070         PORTB = 0b11111101;
000123 efed      	LDI  R30,LOW(253)
000124 bbe8      	OUT  0x18,R30
                 ; 0000 0071         set_number(counter6);
000125 2dab      	MOV  R26,R11
000126 df75      	RCALL _set_number
                 ; 0000 0072       }
                 ; 0000 0073 }
                 _0x26:
000127 91e9      	LD   R30,Y+
000128 bfef      	OUT  SREG,R30
000129 91f9      	LD   R31,Y+
00012a 91e9      	LD   R30,Y+
00012b 91b9      	LD   R27,Y+
00012c 91a9      	LD   R26,Y+
00012d 9199      	LD   R25,Y+
00012e 9189      	LD   R24,Y+
00012f 9179      	LD   R23,Y+
000130 9169      	LD   R22,Y+
000131 90f9      	LD   R15,Y+
000132 9019      	LD   R1,Y+
000133 9009      	LD   R0,Y+
000134 9518      	RETI
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 0076 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0077 // Declare your local variables here
                 ; 0000 0078 
                 ; 0000 0079 // Input/Output Ports initialization
                 ; 0000 007A     // Input/Output Ports initialization
                 ; 0000 007B     // Port A initialization
                 ; 0000 007C     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 007D     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 007E     PORTA = 0x00;
000135 e0e0      	LDI  R30,LOW(0)
000136 bbeb      	OUT  0x1B,R30
                 ; 0000 007F     DDRA = 0x00;
000137 bbea      	OUT  0x1A,R30
                 ; 0000 0080 
                 ; 0000 0081     // Port B initialization
                 ; 0000 0082     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0083     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0084     PORTB = 0x0ff;
000138 efef      	LDI  R30,LOW(255)
000139 bbe8      	OUT  0x18,R30
                 ; 0000 0085     DDRB = 0xff;
00013a bbe7      	OUT  0x17,R30
                 ; 0000 0086 
                 ; 0000 0087     // Port C initialization
                 ; 0000 0088     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 0089     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 008A     PORTC = 0xFF;
00013b bbe5      	OUT  0x15,R30
                 ; 0000 008B     DDRC = 0xFF;
00013c bbe4      	OUT  0x14,R30
                 ; 0000 008C 
                 ; 0000 008D     // Port D initialization
                 ; 0000 008E     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
                 ; 0000 008F     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
                 ; 0000 0090     PORTD = 0x00;
00013d e0e0      	LDI  R30,LOW(0)
00013e bbe2      	OUT  0x12,R30
                 ; 0000 0091     DDRD = 0x00;
00013f bbe1      	OUT  0x11,R30
                 ; 0000 0092 // Timer/Counter 0 initialization
                 ; 0000 0093 // Clock source: System Clock
                 ; 0000 0094 // Clock value: 125.000 kHz
                 ; 0000 0095 // Mode: Normal top=0xFF
                 ; 0000 0096 // OC0 output: Disconnected
                 ; 0000 0097 // Timer Period: 2.048 ms
                 ; 0000 0098 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (1<<CS01) | (1<<CS00);
000140 e0e3      	LDI  R30,LOW(3)
000141 bfe3      	OUT  0x33,R30
                 ; 0000 0099 TCNT0=0x00;
000142 e0e0      	LDI  R30,LOW(0)
000143 bfe2      	OUT  0x32,R30
                 ; 0000 009A OCR0=0x00;
000144 bfec      	OUT  0x3C,R30
                 ; 0000 009B 
                 ; 0000 009C // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 009D TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (1<<OCIE0) | (0<<TOIE0);
000145 e0e2      	LDI  R30,LOW(2)
000146 bfe9      	OUT  0x39,R30
                 ; 0000 009E 
                 ; 0000 009F // USART initialization
                 ; 0000 00A0 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00A1 // USART Receiver: On
                 ; 0000 00A2 // USART Transmitter: On
                 ; 0000 00A3 // USART Mode: Asynchronous
                 ; 0000 00A4 // USART Baud Rate: 9600
                 ; 0000 00A5 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
000147 e0e0      	LDI  R30,LOW(0)
000148 b9eb      	OUT  0xB,R30
                 ; 0000 00A6 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
000149 e1e8      	LDI  R30,LOW(24)
00014a b9ea      	OUT  0xA,R30
                 ; 0000 00A7 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00014b e8e6      	LDI  R30,LOW(134)
00014c bde0      	OUT  0x20,R30
                 ; 0000 00A8 UBRRH=0x00;
00014d e0e0      	LDI  R30,LOW(0)
00014e bde0      	OUT  0x20,R30
                 ; 0000 00A9 UBRRL=0x33;
00014f e3e3      	LDI  R30,LOW(51)
000150 b9e9      	OUT  0x9,R30
                 ; 0000 00AA 
                 ; 0000 00AB // Global enable interrupts
                 ; 0000 00AC #asm("sei")
000151 9478      	sei
                 ; 0000 00AD 
                 ; 0000 00AE while (1)
                 _0x27:
                 ; 0000 00AF       {
                 ; 0000 00B0       // Place your code here
                 ; 0000 00B1     a = getchar();
000152 d03a      	RCALL _getchar
000153 2e5e      	MOV  R5,R30
                 ; 0000 00B2     if (idx2 == 0) {
000154 91e0 0260 	LDS  R30,_idx2
000156 91f0 0261 	LDS  R31,_idx2+1
000158 9730      	SBIW R30,0
000159 f439      	BRNE _0x2A
                 ; 0000 00B3         counter2 = 'a';
00015a e6e1      	LDI  R30,LOW(97)
00015b 2e7e      	MOV  R7,R30
                 ; 0000 00B4         counter3 = 'a';
00015c 2e6e      	MOV  R6,R30
                 ; 0000 00B5         counter4 = 'a';
00015d 2e9e      	MOV  R9,R30
                 ; 0000 00B6         counter5 = 'a';
00015e 2e8e      	MOV  R8,R30
                 ; 0000 00B7         counter1 = 'a';
00015f 2e4e      	MOV  R4,R30
                 ; 0000 00B8         counter6 = a;
000160 2cb5      	MOV  R11,R5
                 ; 0000 00B9     }
                 ; 0000 00BA 
                 ; 0000 00BB     if (idx2 == 5) {
                 _0x2A:
000161 940e 0191 	CALL SUBOPT_0x0
000163 9715      	SBIW R26,5
000164 f409      	BRNE _0x2B
                 ; 0000 00BC         counter1 = a;
000165 2c45      	MOV  R4,R5
                 ; 0000 00BD     }
                 ; 0000 00BE 
                 ; 0000 00BF     if (idx2 == 4) {
                 _0x2B:
000166 940e 0191 	CALL SUBOPT_0x0
000168 9714      	SBIW R26,4
000169 f409      	BRNE _0x2C
                 ; 0000 00C0         counter2 = a;
00016a 2c75      	MOV  R7,R5
                 ; 0000 00C1     }
                 ; 0000 00C2 
                 ; 0000 00C3     if (idx2 == 3) {
                 _0x2C:
00016b 940e 0191 	CALL SUBOPT_0x0
00016d 9713      	SBIW R26,3
00016e f409      	BRNE _0x2D
                 ; 0000 00C4         counter3 = a;
00016f 2c65      	MOV  R6,R5
                 ; 0000 00C5     }
                 ; 0000 00C6 
                 ; 0000 00C7     if (idx2 == 2) {
                 _0x2D:
000170 940e 0191 	CALL SUBOPT_0x0
000172 9712      	SBIW R26,2
000173 f409      	BRNE _0x2E
                 ; 0000 00C8         counter4 = a;
000174 2c95      	MOV  R9,R5
                 ; 0000 00C9     }
                 ; 0000 00CA 
                 ; 0000 00CB      if (idx2 == 1) {
                 _0x2E:
000175 940e 0191 	CALL SUBOPT_0x0
000177 9711      	SBIW R26,1
000178 f409      	BRNE _0x2F
                 ; 0000 00CC         counter5 = a;
000179 2c85      	MOV  R8,R5
                 ; 0000 00CD       }
                 ; 0000 00CE       idx2++;
                 _0x2F:
00017a e6a0      	LDI  R26,LOW(_idx2)
00017b e0b2      	LDI  R27,HIGH(_idx2)
00017c 91ed      	LD   R30,X+
00017d 91fd      	LD   R31,X+
00017e 9631      	ADIW R30,1
00017f 93fe      	ST   -X,R31
000180 93ee      	ST   -X,R30
                 ; 0000 00CF       idx2 %= 6;
000181 940e 0191 	CALL SUBOPT_0x0
000183 e0e6      	LDI  R30,LOW(6)
000184 e0f0      	LDI  R31,HIGH(6)
000185 940e 01ad 	CALL __MODW21
000187 93e0 0260 	STS  _idx2,R30
000189 93f0 0261 	STS  _idx2+1,R31
                 ; 0000 00D0 }
00018b cfc6      	RJMP _0x27
                 ; 0000 00D1 }
                 _0x30:
00018c cfff      	RJMP _0x30
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 ; .FSTART _getchar
                 getchar0:
00018d 9b5f           sbis usr,rxc
00018e cffe           rjmp getchar0
00018f b1ec           in   r30,udr
000190 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.DSEG
                 _idx2:
000260           	.BYTE 0x2
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x0:
000191 91a0 0260 	LDS  R26,_idx2
000193 91b0 0261 	LDS  R27,_idx2+1
000195 9508      	RET
                 
                 
                 	.CSEG
                 __ANEGW1:
000196 95f1      	NEG  R31
000197 95e1      	NEG  R30
000198 40f0      	SBCI R31,0
000199 9508      	RET
                 
                 __DIVW21U:
00019a 2400      	CLR  R0
00019b 2411      	CLR  R1
00019c e190      	LDI  R25,16
                 __DIVW21U1:
00019d 0faa      	LSL  R26
00019e 1fbb      	ROL  R27
00019f 1c00      	ROL  R0
0001a0 1c11      	ROL  R1
0001a1 1a0e      	SUB  R0,R30
0001a2 0a1f      	SBC  R1,R31
0001a3 f418      	BRCC __DIVW21U2
0001a4 0e0e      	ADD  R0,R30
0001a5 1e1f      	ADC  R1,R31
0001a6 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0001a7 60a1      	SBR  R26,1
                 __DIVW21U3:
0001a8 959a      	DEC  R25
0001a9 f799      	BRNE __DIVW21U1
0001aa 01fd      	MOVW R30,R26
0001ab 01d0      	MOVW R26,R0
0001ac 9508      	RET
                 
                 __MODW21:
0001ad 94e8      	CLT
0001ae ffb7      	SBRS R27,7
0001af c004      	RJMP __MODW211
0001b0 95a0      	COM  R26
0001b1 95b0      	COM  R27
0001b2 9611      	ADIW R26,1
0001b3 9468      	SET
                 __MODW211:
0001b4 fdf7      	SBRC R31,7
0001b5 dfe0      	RCALL __ANEGW1
0001b6 dfe3      	RCALL __DIVW21U
0001b7 01fd      	MOVW R30,R26
0001b8 f40e      	BRTC __MODW212
0001b9 dfdc      	RCALL __ANEGW1
                 __MODW212:
0001ba 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  13 r1 :   7 r2 :   0 r3 :   0 r4 :   3 r5 :   7 r6 :   3 r7 :   3 
r8 :   3 r9 :   3 r10:   0 r11:   2 r12:  10 r13:   6 r14:   0 r15:   2 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   4 r23:   2 
r24:   9 r25:   6 r26:  76 r27:   9 r28:   2 r29:   1 r30: 109 r31:  26 
x  :   7 y  :  46 z  :   7 
Registers used: 25 out of 35 (71.4%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :   4 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   1 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  36 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   8 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   2 
cp    :   5 cpc   :   5 cpi   :  20 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   0 jmp   :  22 ld    :  34 ldd   :   0 ldi   :  68 
lds   :   4 lpm   :   7 lsl   :   1 lsr   :   0 mov   :  19 movw  :  10 
mul   :   0 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   0 out   :  31 pop   :   0 push  :   0 rcall :  20 ret   :   6 
reti  :   1 rjmp  :  27 rol   :   3 ror   :   0 sbc   :   1 sbci  :   1 
sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :   9 sbr   :   1 sbrc  :   1 
sbrs  :   1 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  19 std   :   0 sts   :   2 sub   :   1 subi  :   0 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 45 out of 116 (38.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000376    852     34    886   32768   2.7%
[.dseg] 0x000060 0x000262      0      2      2    2048   0.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 9 warnings
