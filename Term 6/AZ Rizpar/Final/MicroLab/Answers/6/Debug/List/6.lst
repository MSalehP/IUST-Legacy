
AVRASM ver. 2.1.30  C:\Users\Lenovo\Desktop\6\Debug\List\6.asm Sat Jan 06 00:42:58 2024

C:\Users\Lenovo\Desktop\6\Debug\List\6.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\6\Debug\List\6.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\6\Debug\List\6.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\6\Debug\List\6.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Lenovo\Desktop\6\Debug\List\6.asm(1092): warning: Register r9 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _switchNumber=R4
                 	.DEF _switchNumber_msb=R5
                 	.DEF _checker=R6
                 	.DEF _checker_msb=R7
                 	.DEF _counter=R9
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0052 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
00002a 2710
00002b 03e8
00002c 0064
00002d 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00002e 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00002f 1000
000030 0100
000031 0010
000032 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
C:\Users\Lenovo\Desktop\6\Debug\List\6.asm(1131): warning: .cseg .db misalignment - padding zero byte
000033 0000      	.DB  0x0
                 
                 _0x3:
000034 3130
000035 3332
000036 3534
000037 3736      	.DB  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
000038 3938
000039 4241
00003a 4443
00003b 4645      	.DB  0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46
                 _0x0:
00003c 0a0d
00003d 4920
00003e 206e
00003f 6874      	.DB  0xD,0xA,0x20,0x49,0x6E,0x20,0x74,0x68
000040 2065
000041 616e
000042 656d
000043 6f20      	.DB  0x65,0x20,0x6E,0x61,0x6D,0x65,0x20,0x6F
000044 2066
000045 6f47
000046 0d64
000047 000a      	.DB  0x66,0x20,0x47,0x6F,0x64,0xD,0xA,0x0
                 
                 __GLOBAL_INI_TBL:
000048 0001      	.DW  0x01
000049 0009      	.DW  0x09
00004a 0066      	.DW  __REG_VARS*2
                 
00004b 0010      	.DW  0x10
00004c 027b      	.DW  _HEXNUMBERS
00004d 0068      	.DW  _0x3*2
                 
00004e 0018      	.DW  0x18
00004f 0260      	.DW  _0x8
000050 0078      	.DW  _0x0*2
                 
                 _0xFFFFFFFF:
000051 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000052 94f8      	CLI
000053 27ee      	CLR  R30
000054 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000055 e0f1      	LDI  R31,1
000056 bffb      	OUT  GICR,R31
000057 bfeb      	OUT  GICR,R30
000058 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000059 e08d      	LDI  R24,(14-2)+1
00005a e0a2      	LDI  R26,2
00005b 27bb      	CLR  R27
                 __CLEAR_REG:
00005c 93ed      	ST   X+,R30
00005d 958a      	DEC  R24
00005e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000060 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000061 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000062 93ed      	ST   X+,R30
000063 9701      	SBIW R24,1
000064 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000065 e9e0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000066 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000067 9185      	LPM  R24,Z+
000068 9195      	LPM  R25,Z+
000069 9700      	SBIW R24,0
00006a f061      	BREQ __GLOBAL_INI_END
00006b 91a5      	LPM  R26,Z+
00006c 91b5      	LPM  R27,Z+
00006d 9005      	LPM  R0,Z+
00006e 9015      	LPM  R1,Z+
00006f 01bf      	MOVW R22,R30
000070 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000071 9005      	LPM  R0,Z+
000072 920d      	ST   X+,R0
000073 9701      	SBIW R24,1
000074 f7e1      	BRNE __GLOBAL_INI_LOOP
000075 01fb      	MOVW R30,R22
000076 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000077 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000078 bfed      	OUT  SPL,R30
000079 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00007a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00007b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00007c e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00007d 940c 007f 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <delay.h>
                 ;#include <stdbool.h>
                 ;
                 ;void usart_send_string(char *str);
                 ;void make_hex(int switchNumber);
                 ;
                 ;int switchNumber;
                 ;int checker;
                 ;bool counter = false;
                 ;char hex[3];
                 ;char HEXNUMBERS[] = {'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'};
                 
                 	.DSEG
                 ;
                 ;void main(void)
                 ; 0000 0010 {
                 
                 	.CSEG
                 _main:
                 ; .FSTART _main
                 ; 0000 0011 
                 ; 0000 0012 
                 ; 0000 0013 
                 ; 0000 0014 
                 ; 0000 0015 DDRC=(0<<DDC7) | (0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
00007f e0e0      	LDI  R30,LOW(0)
000080 bbe4      	OUT  0x14,R30
                 ; 0000 0016 PORTC=(1<<PORTC7) | (1<<PORTC6) | (1<<PORTC5) | (1<<PORTC4) | (1<<PORTC3) | (1<<PORTC2) | (1<<PORTC1) | (1<<PORTC0);
000081 efef      	LDI  R30,LOW(255)
000082 bbe5      	OUT  0x15,R30
                 ; 0000 0017 
                 ; 0000 0018 DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
000083 bbe1      	OUT  0x11,R30
                 ; 0000 0019 PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
000084 e0e0      	LDI  R30,LOW(0)
000085 bbe2      	OUT  0x12,R30
                 ; 0000 001A 
                 ; 0000 001B // Timer/Counter 0 initialization
                 ; 0000 001C // Clock source: System Clock
                 ; 0000 001D // Clock value: Timer 0 Stopped
                 ; 0000 001E // Mode: Normal top=0xFF
                 ; 0000 001F // OC0 output: Disconnected
                 ; 0000 0020 TCCR0=(0<<WGM00) | (0<<COM01) | (0<<COM00) | (0<<WGM01) | (0<<CS02) | (0<<CS01) | (0<<CS00);
000086 bfe3      	OUT  0x33,R30
                 ; 0000 0021 TCNT0=0x00;
000087 bfe2      	OUT  0x32,R30
                 ; 0000 0022 OCR0=0x00;
000088 bfec      	OUT  0x3C,R30
                 ; 0000 0023 
                 ; 0000 0024 // Timer/Counter 1 initialization
                 ; 0000 0025 // Clock source: System Clock
                 ; 0000 0026 // Clock value: Timer1 Stopped
                 ; 0000 0027 // Mode: Normal top=0xFFFF
                 ; 0000 0028 // OC1A output: Disconnected
                 ; 0000 0029 // OC1B output: Disconnected
                 ; 0000 002A // Noise Canceler: Off
                 ; 0000 002B // Input Capture on Falling Edge
                 ; 0000 002C // Timer1 Overflow Interrupt: Off
                 ; 0000 002D // Input Capture Interrupt: Off
                 ; 0000 002E // Compare A Match Interrupt: Off
                 ; 0000 002F // Compare B Match Interrupt: Off
                 ; 0000 0030 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
000089 bdef      	OUT  0x2F,R30
                 ; 0000 0031 TCCR1B=(0<<ICNC1) | (0<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (0<<CS11) | (0<<CS10);
00008a bdee      	OUT  0x2E,R30
                 ; 0000 0032 TCNT1H=0x00;
00008b bded      	OUT  0x2D,R30
                 ; 0000 0033 TCNT1L=0x00;
00008c bdec      	OUT  0x2C,R30
                 ; 0000 0034 ICR1H=0x00;
00008d bde7      	OUT  0x27,R30
                 ; 0000 0035 ICR1L=0x00;
00008e bde6      	OUT  0x26,R30
                 ; 0000 0036 OCR1AH=0x00;
00008f bdeb      	OUT  0x2B,R30
                 ; 0000 0037 OCR1AL=0x00;
000090 bdea      	OUT  0x2A,R30
                 ; 0000 0038 OCR1BH=0x00;
000091 bde9      	OUT  0x29,R30
                 ; 0000 0039 OCR1BL=0x00;
000092 bde8      	OUT  0x28,R30
                 ; 0000 003A 
                 ; 0000 003B // Timer/Counter 2 initialization
                 ; 0000 003C // Clock source: System Clock
                 ; 0000 003D // Clock value: Timer2 Stopped
                 ; 0000 003E // Mode: Normal top=0xFF
                 ; 0000 003F // OC2 output: Disconnected
                 ; 0000 0040 ASSR=0<<AS2;
000093 bde2      	OUT  0x22,R30
                 ; 0000 0041 TCCR2=(0<<PWM2) | (0<<COM21) | (0<<COM20) | (0<<CTC2) | (0<<CS22) | (0<<CS21) | (0<<CS20);
000094 bde5      	OUT  0x25,R30
                 ; 0000 0042 TCNT2=0x00;
000095 bde4      	OUT  0x24,R30
                 ; 0000 0043 OCR2=0x00;
000096 bde3      	OUT  0x23,R30
                 ; 0000 0044 
                 ; 0000 0045 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0046 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (0<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<OCIE0) | (0<<TOIE0);
000097 bfe9      	OUT  0x39,R30
                 ; 0000 0047 
                 ; 0000 0048 // External Interrupt(s) initialization
                 ; 0000 0049 // INT0: Off
                 ; 0000 004A // INT1: Off
                 ; 0000 004B // INT2: Off
                 ; 0000 004C MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000098 bfe5      	OUT  0x35,R30
                 ; 0000 004D MCUCSR=(0<<ISC2);
000099 bfe4      	OUT  0x34,R30
                 ; 0000 004E 
                 ; 0000 004F // USART initialization
                 ; 0000 0050 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0051 // USART Receiver: On
                 ; 0000 0052 // USART Transmitter: On
                 ; 0000 0053 // USART Mode: Asynchronous
                 ; 0000 0054 // USART Baud Rate: 9600
                 ; 0000 0055 UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
00009a b9eb      	OUT  0xB,R30
                 ; 0000 0056 UCSRB=(0<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
00009b e1e8      	LDI  R30,LOW(24)
00009c b9ea      	OUT  0xA,R30
                 ; 0000 0057 UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
00009d e8e6      	LDI  R30,LOW(134)
00009e bde0      	OUT  0x20,R30
                 ; 0000 0058 UBRRH=0x00;
00009f e0e0      	LDI  R30,LOW(0)
0000a0 bde0      	OUT  0x20,R30
                 ; 0000 0059 UBRRL=0x33;
0000a1 e3e3      	LDI  R30,LOW(51)
0000a2 b9e9      	OUT  0x9,R30
                 ; 0000 005A 
                 ; 0000 005B // Analog Comparator initialization
                 ; 0000 005C // Analog Comparator: Off
                 ; 0000 005D // The Analog Comparator's positive input is
                 ; 0000 005E // connected to the AIN0 pin
                 ; 0000 005F // The Analog Comparator's negative input is
                 ; 0000 0060 // connected to the AIN1 pin
                 ; 0000 0061 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0000a3 e8e0      	LDI  R30,LOW(128)
0000a4 b9e8      	OUT  0x8,R30
                 ; 0000 0062 SFIOR=(0<<ACME);
0000a5 e0e0      	LDI  R30,LOW(0)
0000a6 bfe0      	OUT  0x30,R30
                 ; 0000 0063 
                 ; 0000 0064 // ADC initialization
                 ; 0000 0065 // ADC disabled
                 ; 0000 0066 ADCSRA=(0<<ADEN) | (0<<ADSC) | (0<<ADATE) | (0<<ADIF) | (0<<ADIE) | (0<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0000a7 b9e6      	OUT  0x6,R30
                 ; 0000 0067 
                 ; 0000 0068 // SPI initialization
                 ; 0000 0069 // SPI disabled
                 ; 0000 006A SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0000a8 b9ed      	OUT  0xD,R30
                 ; 0000 006B 
                 ; 0000 006C // TWI initialization
                 ; 0000 006D // TWI disabled
                 ; 0000 006E TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0000a9 bfe6      	OUT  0x36,R30
                 ; 0000 006F 
                 ; 0000 0070 
                 ; 0000 0071 while (1)
                 _0x4:
                 ; 0000 0072     {
                 ; 0000 0073         if(!counter) {
0000aa 2099      	TST  R9
0000ab f449      	BRNE _0x7
                 ; 0000 0074             usart_send_string("\r\n In the name of God\r\n");
                +
0000ac e6a0     +LDI R26 , LOW ( _0x8 + ( 0 ) )
0000ad e0b2     +LDI R27 , HIGH ( _0x8 + ( 0 ) )
                 	__POINTW2MN _0x8,0
0000ae d041      	RCALL _usart_send_string
                 ; 0000 0075             counter=true;
0000af e0e1      	LDI  R30,LOW(1)
0000b0 2e9e      	MOV  R9,R30
                 ; 0000 0076             switchNumber = PINC;
0000b1 b243      	IN   R4,19
0000b2 2455      	CLR  R5
                 ; 0000 0077             checker = switchNumber;
0000b3 940e 028e 	CALL SUBOPT_0x0
                 ; 0000 0078             make_hex(switchNumber);
                 ; 0000 0079             usart_send_string(hex);
                 ; 0000 007A             printf("\r\n");
                 ; 0000 007B         }
                 ; 0000 007C         switchNumber = PINC;
                 _0x7:
0000b5 b243      	IN   R4,19
0000b6 2455      	CLR  R5
                 ; 0000 007D         if(switchNumber != checker)
                +
0000b7 1464     +CP R6 , R4
0000b8 0475     +CPC R7 , R5
                 	__CPWRR 6,7,4,5
0000b9 f011      	BREQ _0x9
                 ; 0000 007E         {
                 ; 0000 007F             checker = switchNumber;
0000ba 940e 028e 	CALL SUBOPT_0x0
                 ; 0000 0080             make_hex(switchNumber);
                 ; 0000 0081             usart_send_string(hex);
                 ; 0000 0082             printf("\r\n");
                 ; 0000 0083         }
                 ; 0000 0084 
                 ; 0000 0085     }
                 _0x9:
0000bc cfed      	RJMP _0x4
                 ; 0000 0086 }
                 _0xA:
0000bd cfff      	RJMP _0xA
                 ; .FEND
                 
                 	.DSEG
                 _0x8:
000260           	.BYTE 0x18
                 ;void make_hex(int switchNumber){
                 ; 0000 0087 void make_hex(int switchNumber){
                 
                 	.CSEG
                 _make_hex:
                 ; .FSTART _make_hex
                 ; 0000 0088     int index = 1;
                 ; 0000 0089     hex[0] = '0';
0000be 93ba      	ST   -Y,R27
0000bf 93aa      	ST   -Y,R26
0000c0 931a      	ST   -Y,R17
0000c1 930a      	ST   -Y,R16
                 ;	switchNumber -> Y+2
                 ;	index -> R16,R17
                +
0000c2 e001     +LDI R16 , LOW ( 1 )
0000c3 e010     +LDI R17 , HIGH ( 1 )
                 	__GETWRN 16,17,1
0000c4 e3e0      	LDI  R30,LOW(48)
0000c5 93e0 0278 	STS  _hex,R30
                 ; 0000 008A     hex[1] = '0';
                +
0000c7 93e0 0279+STS _hex + ( 1 ) , R30
                 	__PUTB1MN _hex,1
                 ; 0000 008B     hex[2] = '\0';
0000c9 e0e0      	LDI  R30,LOW(0)
                +
0000ca 93e0 027a+STS _hex + ( 2 ) , R30
                 	__PUTB1MN _hex,2
                 ; 0000 008C     while(switchNumber != 0)
                 _0xB:
0000cc 81ea      	LDD  R30,Y+2
0000cd 81fb      	LDD  R31,Y+2+1
0000ce 9730      	SBIW R30,0
0000cf f0e1      	BREQ _0xD
                 ; 0000 008D         {
                 ; 0000 008E             int rem = switchNumber % 16;
                 ; 0000 008F             hex[index] = HEXNUMBERS[rem];
0000d0 9722      	SBIW R28,2
                 ;	switchNumber -> Y+4
                 ;	rem -> Y+0
0000d1 81ec      	LDD  R30,Y+4
0000d2 81fd      	LDD  R31,Y+4+1
0000d3 e0af      	LDI  R26,LOW(15)
0000d4 e0b0      	LDI  R27,HIGH(15)
0000d5 940e 02e4 	CALL __MANDW12
0000d7 83e8      	ST   Y,R30
0000d8 83f9      	STD  Y+1,R31
0000d9 01d8      	MOVW R26,R16
0000da 58a8      	SUBI R26,LOW(-_hex)
0000db 4fbd      	SBCI R27,HIGH(-_hex)
0000dc 58e5      	SUBI R30,LOW(-_HEXNUMBERS)
0000dd 4ffd      	SBCI R31,HIGH(-_HEXNUMBERS)
0000de 81e0      	LD   R30,Z
0000df 93ec      	ST   X,R30
                 ; 0000 0090             index--;
                +
0000e0 5001     +SUBI R16 , LOW ( 1 )
0000e1 4010     +SBCI R17 , HIGH ( 1 )
                 	__SUBWRN 16,17,1
                 ; 0000 0091             switchNumber /= 16;
0000e2 81ac      	LDD  R26,Y+4
0000e3 81bd      	LDD  R27,Y+4+1
0000e4 e1e0      	LDI  R30,LOW(16)
0000e5 e0f0      	LDI  R31,HIGH(16)
0000e6 940e 02df 	CALL __DIVW21
0000e8 83ec      	STD  Y+4,R30
0000e9 83fd      	STD  Y+4+1,R31
                 ; 0000 0092         }
0000ea 9622      	ADIW R28,2
0000eb cfe0      	RJMP _0xB
                 _0xD:
                 ; 0000 0093 }
0000ec 8119      	LDD  R17,Y+1
0000ed 8108      	LDD  R16,Y+0
0000ee 9624      	ADIW R28,4
0000ef 9508      	RET
                 ; .FEND
                 ;
                 ;void usart_send_string(char *str)
                 ; 0000 0096 {
                 _usart_send_string:
                 ; .FSTART _usart_send_string
                 ; 0000 0097     unsigned char i = 0;
                 ; 0000 0098     for(i=0;str[i];i++)
0000f0 93ba      	ST   -Y,R27
0000f1 93aa      	ST   -Y,R26
0000f2 931a      	ST   -Y,R17
                 ;	*str -> Y+1
                 ;	i -> R17
0000f3 e010      	LDI  R17,0
0000f4 e010      	LDI  R17,LOW(0)
                 _0xF:
0000f5 81a9      	LDD  R26,Y+1
0000f6 81ba      	LDD  R27,Y+1+1
0000f7 27ee      	CLR  R30
0000f8 0fa1      	ADD  R26,R17
0000f9 1fbe      	ADC  R27,R30
0000fa 91ec      	LD   R30,X
0000fb 30e0      	CPI  R30,0
0000fc f049      	BREQ _0x10
                 ; 0000 0099     putchar(str[i]);
0000fd 81a9      	LDD  R26,Y+1
0000fe 81ba      	LDD  R27,Y+1+1
0000ff 27ee      	CLR  R30
000100 0fa1      	ADD  R26,R17
000101 1fbe      	ADC  R27,R30
000102 91ac      	LD   R26,X
000103 d004      	RCALL _putchar
000104 5f1f      	SUBI R17,-1
000105 cfef      	RJMP _0xF
                 _0x10:
                 ; 0000 009A }
000106 8118      	LDD  R17,Y+0
000107 c012      	RJMP _0x2060001
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
000108 93aa      	ST   -Y,R26
                 putchar0:
000109 9b5d           sbis usr,udre
00010a cffe           rjmp putchar0
00010b 81e8           ld   r30,y
00010c b9ec           out  udr,r30
00010d 9621      	ADIW R28,1
00010e 9508      	RET
                 ; .FEND
                 _put_usart_G100:
                 ; .FSTART _put_usart_G100
00010f 93ba      	ST   -Y,R27
000110 93aa      	ST   -Y,R26
000111 81aa      	LDD  R26,Y+2
000112 dff5      	RCALL _putchar
000113 81a8      	LD   R26,Y
000114 81b9      	LDD  R27,Y+1
000115 91ed      	LD   R30,X+
000116 91fd      	LD   R31,X+
000117 9631      	ADIW R30,1
000118 93fe      	ST   -X,R31
000119 93ee      	ST   -X,R30
                 _0x2060001:
00011a 9623      	ADIW R28,3
00011b 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
00011c 93ba      	ST   -Y,R27
00011d 93aa      	ST   -Y,R26
00011e 9726      	SBIW R28,6
00011f 940e 0304 	CALL __SAVELOCR6
000121 e010      	LDI  R17,0
000122 85ac      	LDD  R26,Y+12
000123 85bd      	LDD  R27,Y+12+1
000124 e0e0      	LDI  R30,LOW(0)
000125 e0f0      	LDI  R31,HIGH(0)
000126 93ed      	ST   X+,R30
000127 93fc      	ST   X,R31
                 _0x2000016:
000128 89ea      	LDD  R30,Y+18
000129 89fb      	LDD  R31,Y+18+1
00012a 9631      	ADIW R30,1
00012b 8bea      	STD  Y+18,R30
00012c 8bfb      	STD  Y+18+1,R31
00012d 9731      	SBIW R30,1
00012e 91e4      	LPM  R30,Z
00012f 2f2e      	MOV  R18,R30
000130 30e0      	CPI  R30,0
000131 f409      	BRNE PC+2
000132 c115      	RJMP _0x2000018
000133 2fe1      	MOV  R30,R17
000134 30e0      	CPI  R30,0
000135 f439      	BRNE _0x200001C
000136 3225      	CPI  R18,37
000137 f411      	BRNE _0x200001D
000138 e011      	LDI  R17,LOW(1)
000139 c002      	RJMP _0x200001E
                 _0x200001D:
00013a 940e 029f 	CALL SUBOPT_0x1
                 _0x200001E:
00013c c10a      	RJMP _0x200001B
                 _0x200001C:
00013d 30e1      	CPI  R30,LOW(0x1)
00013e f4a9      	BRNE _0x200001F
00013f 3225      	CPI  R18,37
000140 f419      	BRNE _0x2000020
000141 940e 029f 	CALL SUBOPT_0x1
000143 c102      	RJMP _0x20000CC
                 _0x2000020:
000144 e012      	LDI  R17,LOW(2)
000145 e040      	LDI  R20,LOW(0)
000146 e000      	LDI  R16,LOW(0)
000147 322d      	CPI  R18,45
000148 f411      	BRNE _0x2000021
000149 e001      	LDI  R16,LOW(1)
00014a c0fc      	RJMP _0x200001B
                 _0x2000021:
00014b 322b      	CPI  R18,43
00014c f411      	BRNE _0x2000022
00014d e24b      	LDI  R20,LOW(43)
00014e c0f8      	RJMP _0x200001B
                 _0x2000022:
00014f 3220      	CPI  R18,32
000150 f411      	BRNE _0x2000023
000151 e240      	LDI  R20,LOW(32)
000152 c0f4      	RJMP _0x200001B
                 _0x2000023:
000153 c002      	RJMP _0x2000024
                 _0x200001F:
000154 30e2      	CPI  R30,LOW(0x2)
000155 f439      	BRNE _0x2000025
                 _0x2000024:
000156 e050      	LDI  R21,LOW(0)
000157 e013      	LDI  R17,LOW(3)
000158 3320      	CPI  R18,48
000159 f411      	BRNE _0x2000026
00015a 6800      	ORI  R16,LOW(128)
00015b c0eb      	RJMP _0x200001B
                 _0x2000026:
00015c c003      	RJMP _0x2000027
                 _0x2000025:
00015d 30e3      	CPI  R30,LOW(0x3)
00015e f009      	BREQ PC+2
00015f c0e7      	RJMP _0x200001B
                 _0x2000027:
000160 3320      	CPI  R18,48
000161 f010      	BRLO _0x200002A
000162 332a      	CPI  R18,58
000163 f008      	BRLO _0x200002B
                 _0x200002A:
000164 c007      	RJMP _0x2000029
                 _0x200002B:
000165 e0aa      	LDI  R26,LOW(10)
000166 9f5a      	MUL  R21,R26
000167 2d50      	MOV  R21,R0
000168 2fe2      	MOV  R30,R18
000169 53e0      	SUBI R30,LOW(48)
00016a 0f5e      	ADD  R21,R30
00016b c0db      	RJMP _0x200001B
                 _0x2000029:
00016c 2fe2      	MOV  R30,R18
00016d 36e3      	CPI  R30,LOW(0x63)
00016e f449      	BRNE _0x200002F
00016f 940e 02a6 	CALL SUBOPT_0x2
000171 89e8      	LDD  R30,Y+16
000172 89f9      	LDD  R31,Y+16+1
000173 81a4      	LDD  R26,Z+4
000174 93aa      	ST   -Y,R26
000175 940e 02ac 	CALL SUBOPT_0x3
000177 c0ce      	RJMP _0x2000030
                 _0x200002F:
000178 37e3      	CPI  R30,LOW(0x73)
000179 f441      	BRNE _0x2000032
00017a 940e 02a6 	CALL SUBOPT_0x2
00017c 940e 02b2 	CALL SUBOPT_0x4
00017e 940e 0275 	CALL _strlen
000180 2f1e      	MOV  R17,R30
000181 c00a      	RJMP _0x2000033
                 _0x2000032:
000182 37e0      	CPI  R30,LOW(0x70)
000183 f461      	BRNE _0x2000035
000184 940e 02a6 	CALL SUBOPT_0x2
000186 940e 02b2 	CALL SUBOPT_0x4
000188 940e 0281 	CALL _strlenf
00018a 2f1e      	MOV  R17,R30
00018b 6008      	ORI  R16,LOW(8)
                 _0x2000033:
00018c 6002      	ORI  R16,LOW(2)
00018d 770f      	ANDI R16,LOW(127)
00018e e030      	LDI  R19,LOW(0)
00018f c034      	RJMP _0x2000036
                 _0x2000035:
000190 36e4      	CPI  R30,LOW(0x64)
000191 f011      	BREQ _0x2000039
000192 36e9      	CPI  R30,LOW(0x69)
000193 f411      	BRNE _0x200003A
                 _0x2000039:
000194 6004      	ORI  R16,LOW(4)
000195 c002      	RJMP _0x200003B
                 _0x200003A:
000196 37e5      	CPI  R30,LOW(0x75)
000197 f431      	BRNE _0x200003C
                 _0x200003B:
000198 e5e4      	LDI  R30,LOW(_tbl10_G100*2)
000199 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
00019a 83ee      	STD  Y+6,R30
00019b 83ff      	STD  Y+6+1,R31
00019c e015      	LDI  R17,LOW(5)
00019d c00c      	RJMP _0x200003D
                 _0x200003C:
00019e 35e8      	CPI  R30,LOW(0x58)
00019f f411      	BRNE _0x200003F
0001a0 6008      	ORI  R16,LOW(8)
0001a1 c003      	RJMP _0x2000040
                 _0x200003F:
0001a2 37e8      	CPI  R30,LOW(0x78)
0001a3 f009      	BREQ PC+2
0001a4 c0a1      	RJMP _0x2000071
                 _0x2000040:
0001a5 e5ee      	LDI  R30,LOW(_tbl16_G100*2)
0001a6 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
0001a7 83ee      	STD  Y+6,R30
0001a8 83ff      	STD  Y+6+1,R31
0001a9 e014      	LDI  R17,LOW(4)
                 _0x200003D:
0001aa ff02      	SBRS R16,2
0001ab c014      	RJMP _0x2000042
0001ac 940e 02a6 	CALL SUBOPT_0x2
0001ae 940e 02bc 	CALL SUBOPT_0x5
0001b0 85ab      	LDD  R26,Y+11
0001b1 23aa      	TST  R26
0001b2 f43a      	BRPL _0x2000043
0001b3 85ea      	LDD  R30,Y+10
0001b4 85fb      	LDD  R31,Y+10+1
0001b5 940e 02c8 	CALL __ANEGW1
0001b7 87ea      	STD  Y+10,R30
0001b8 87fb      	STD  Y+10+1,R31
0001b9 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
0001ba 3040      	CPI  R20,0
0001bb f011      	BREQ _0x2000044
0001bc 5f1f      	SUBI R17,-LOW(1)
0001bd c001      	RJMP _0x2000045
                 _0x2000044:
0001be 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
0001bf c004      	RJMP _0x2000046
                 _0x2000042:
0001c0 940e 02a6 	CALL SUBOPT_0x2
0001c2 940e 02bc 	CALL SUBOPT_0x5
                 _0x2000046:
                 _0x2000036:
0001c4 fd00      	SBRC R16,0
0001c5 c011      	RJMP _0x2000047
                 _0x2000048:
0001c6 1715      	CP   R17,R21
0001c7 f478      	BRSH _0x200004A
0001c8 ff07      	SBRS R16,7
0001c9 c008      	RJMP _0x200004B
0001ca ff02      	SBRS R16,2
0001cb c004      	RJMP _0x200004C
0001cc 7f0b      	ANDI R16,LOW(251)
0001cd 2f24      	MOV  R18,R20
0001ce 5011      	SUBI R17,LOW(1)
0001cf c001      	RJMP _0x200004D
                 _0x200004C:
0001d0 e320      	LDI  R18,LOW(48)
                 _0x200004D:
0001d1 c001      	RJMP _0x200004E
                 _0x200004B:
0001d2 e220      	LDI  R18,LOW(32)
                 _0x200004E:
0001d3 940e 029f 	CALL SUBOPT_0x1
0001d5 5051      	SUBI R21,LOW(1)
0001d6 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
0001d7 2f31      	MOV  R19,R17
0001d8 ff01      	SBRS R16,1
0001d9 c017      	RJMP _0x200004F
                 _0x2000050:
0001da 3030      	CPI  R19,0
0001db f0a1      	BREQ _0x2000052
0001dc ff03      	SBRS R16,3
0001dd c006      	RJMP _0x2000053
0001de 81ee      	LDD  R30,Y+6
0001df 81ff      	LDD  R31,Y+6+1
0001e0 9125      	LPM  R18,Z+
0001e1 83ee      	STD  Y+6,R30
0001e2 83ff      	STD  Y+6+1,R31
0001e3 c005      	RJMP _0x2000054
                 _0x2000053:
0001e4 81ae      	LDD  R26,Y+6
0001e5 81bf      	LDD  R27,Y+6+1
0001e6 912d      	LD   R18,X+
0001e7 83ae      	STD  Y+6,R26
0001e8 83bf      	STD  Y+6+1,R27
                 _0x2000054:
0001e9 940e 029f 	CALL SUBOPT_0x1
0001eb 3050      	CPI  R21,0
0001ec f009      	BREQ _0x2000055
0001ed 5051      	SUBI R21,LOW(1)
                 _0x2000055:
0001ee 5031      	SUBI R19,LOW(1)
0001ef cfea      	RJMP _0x2000050
                 _0x2000052:
0001f0 c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
0001f1 e320      	LDI  R18,LOW(48)
0001f2 81ee      	LDD  R30,Y+6
0001f3 81ff      	LDD  R31,Y+6+1
0001f4 940e 0300 	CALL __GETW1PF
0001f6 87e8      	STD  Y+8,R30
0001f7 87f9      	STD  Y+8+1,R31
0001f8 81ee      	LDD  R30,Y+6
0001f9 81ff      	LDD  R31,Y+6+1
0001fa 9632      	ADIW R30,2
0001fb 83ee      	STD  Y+6,R30
0001fc 83ff      	STD  Y+6+1,R31
                 _0x200005A:
0001fd 85e8      	LDD  R30,Y+8
0001fe 85f9      	LDD  R31,Y+8+1
0001ff 85aa      	LDD  R26,Y+10
000200 85bb      	LDD  R27,Y+10+1
000201 17ae      	CP   R26,R30
000202 07bf      	CPC  R27,R31
000203 f050      	BRLO _0x200005C
000204 5f2f      	SUBI R18,-LOW(1)
000205 85a8      	LDD  R26,Y+8
000206 85b9      	LDD  R27,Y+8+1
000207 85ea      	LDD  R30,Y+10
000208 85fb      	LDD  R31,Y+10+1
000209 1bea      	SUB  R30,R26
00020a 0bfb      	SBC  R31,R27
00020b 87ea      	STD  Y+10,R30
00020c 87fb      	STD  Y+10+1,R31
00020d cfef      	RJMP _0x200005A
                 _0x200005C:
00020e 332a      	CPI  R18,58
00020f f028      	BRLO _0x200005D
000210 ff03      	SBRS R16,3
000211 c002      	RJMP _0x200005E
000212 5f29      	SUBI R18,-LOW(7)
000213 c001      	RJMP _0x200005F
                 _0x200005E:
000214 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000215 fd04      	SBRC R16,4
000216 c01a      	RJMP _0x2000061
000217 3321      	CPI  R18,49
000218 f420      	BRSH _0x2000063
000219 85a8      	LDD  R26,Y+8
00021a 85b9      	LDD  R27,Y+8+1
00021b 9711      	SBIW R26,1
00021c f409      	BRNE _0x2000062
                 _0x2000063:
00021d c009      	RJMP _0x20000CD
                 _0x2000062:
00021e 1753      	CP   R21,R19
00021f f010      	BRLO _0x2000067
000220 ff00      	SBRS R16,0
000221 c001      	RJMP _0x2000068
                 _0x2000067:
000222 c013      	RJMP _0x2000066
                 _0x2000068:
000223 e220      	LDI  R18,LOW(32)
000224 ff07      	SBRS R16,7
000225 c00b      	RJMP _0x2000069
000226 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
000227 6100      	ORI  R16,LOW(16)
000228 ff02      	SBRS R16,2
000229 c007      	RJMP _0x200006A
00022a 7f0b      	ANDI R16,LOW(251)
00022b 934a      	ST   -Y,R20
00022c 940e 02ac 	CALL SUBOPT_0x3
00022e 3050      	CPI  R21,0
00022f f009      	BREQ _0x200006B
000230 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
000231 940e 029f 	CALL SUBOPT_0x1
000233 3050      	CPI  R21,0
000234 f009      	BREQ _0x200006C
000235 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
000236 5031      	SUBI R19,LOW(1)
000237 85a8      	LDD  R26,Y+8
000238 85b9      	LDD  R27,Y+8+1
000239 9712      	SBIW R26,2
00023a f008      	BRLO _0x2000059
00023b cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
00023c ff00      	SBRS R16,0
00023d c008      	RJMP _0x200006D
                 _0x200006E:
00023e 3050      	CPI  R21,0
00023f f031      	BREQ _0x2000070
000240 5051      	SUBI R21,LOW(1)
000241 e2e0      	LDI  R30,LOW(32)
000242 93ea      	ST   -Y,R30
000243 940e 02ac 	CALL SUBOPT_0x3
000245 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
000246 e010      	LDI  R17,LOW(0)
                 _0x200001B:
000247 cee0      	RJMP _0x2000016
                 _0x2000018:
000248 85ac      	LDD  R26,Y+12
000249 85bd      	LDD  R27,Y+12+1
00024a 940e 02fc 	CALL __GETW1P
00024c 940e 030b 	CALL __LOADLOCR6
00024e 9664      	ADIW R28,20
00024f 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000250 92ff      	PUSH R15
000251 2ef8      	MOV  R15,R24
000252 9726      	SBIW R28,6
000253 931a      	ST   -Y,R17
000254 930a      	ST   -Y,R16
000255 01de      	MOVW R26,R28
000256 9614      	ADIW R26,4
000257 940e 02c4 	CALL __ADDW2R15
000259 018d      	MOVW R16,R26
00025a e0e0      	LDI  R30,LOW(0)
00025b 83ec      	STD  Y+4,R30
00025c 83ed      	STD  Y+4+1,R30
00025d 83ee      	STD  Y+6,R30
00025e 83ef      	STD  Y+6+1,R30
00025f 01de      	MOVW R26,R28
000260 9618      	ADIW R26,8
000261 940e 02c4 	CALL __ADDW2R15
000263 940e 02fc 	CALL __GETW1P
000265 93fa      	ST   -Y,R31
000266 93ea      	ST   -Y,R30
000267 931a      	ST   -Y,R17
000268 930a      	ST   -Y,R16
000269 e0ef      	LDI  R30,LOW(_put_usart_G100)
00026a e0f1      	LDI  R31,HIGH(_put_usart_G100)
00026b 93fa      	ST   -Y,R31
00026c 93ea      	ST   -Y,R30
00026d 01de      	MOVW R26,R28
00026e 9618      	ADIW R26,8
00026f deac      	RCALL __print_G100
000270 8119      	LDD  R17,Y+1
000271 8108      	LDD  R16,Y+0
000272 9628      	ADIW R28,8
000273 90ff      	POP  R15
000274 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
000275 93ba      	ST   -Y,R27
000276 93aa      	ST   -Y,R26
000277 91a9          ld   r26,y+
000278 91b9          ld   r27,y+
000279 27ee          clr  r30
00027a 27ff          clr  r31
                 strlen0:
00027b 916d          ld   r22,x+
00027c 2366          tst  r22
00027d f011          breq strlen1
00027e 9631          adiw r30,1
00027f cffb          rjmp strlen0
                 strlen1:
000280 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000281 93ba      	ST   -Y,R27
000282 93aa      	ST   -Y,R26
000283 27aa          clr  r26
000284 27bb          clr  r27
000285 91e9          ld   r30,y+
000286 91f9          ld   r31,y+
                 strlenf0:
000287 9005      	lpm  r0,z+
000288 2000          tst  r0
000289 f011          breq strlenf1
00028a 9611          adiw r26,1
00028b cffb          rjmp strlenf0
                 strlenf1:
00028c 01fd          movw r30,r26
00028d 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _hex:
000278           	.BYTE 0x3
                 _HEXNUMBERS:
00027b           	.BYTE 0x10
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
00028e 0132      	MOVW R6,R4
00028f 01d2      	MOVW R26,R4
000290 940e 00be 	CALL _make_hex
000292 e7a8      	LDI  R26,LOW(_hex)
000293 e0b2      	LDI  R27,HIGH(_hex)
000294 940e 00f0 	CALL _usart_send_string
                +
000296 e8ed     +LDI R30 , LOW ( 2 * _0x0 + ( 21 ) )
000297 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 21 ) )
                 	__POINTW1FN _0x0,21
000298 93fa      	ST   -Y,R31
000299 93ea      	ST   -Y,R30
00029a e080      	LDI  R24,0
00029b 940e 0250 	CALL _printf
00029d 9622      	ADIW R28,2
00029e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x1:
00029f 932a      	ST   -Y,R18
0002a0 85ad      	LDD  R26,Y+13
0002a1 85be      	LDD  R27,Y+13+1
0002a2 85ef      	LDD  R30,Y+15
0002a3 89f8      	LDD  R31,Y+15+1
0002a4 9509      	ICALL
0002a5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x2:
0002a6 89e8      	LDD  R30,Y+16
0002a7 89f9      	LDD  R31,Y+16+1
0002a8 9734      	SBIW R30,4
0002a9 8be8      	STD  Y+16,R30
0002aa 8bf9      	STD  Y+16+1,R31
0002ab 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x3:
0002ac 85ad      	LDD  R26,Y+13
0002ad 85be      	LDD  R27,Y+13+1
0002ae 85ef      	LDD  R30,Y+15
0002af 89f8      	LDD  R31,Y+15+1
0002b0 9509      	ICALL
0002b1 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
0002b2 89a8      	LDD  R26,Y+16
0002b3 89b9      	LDD  R27,Y+16+1
0002b4 9614      	ADIW R26,4
0002b5 940e 02fc 	CALL __GETW1P
0002b7 83ee      	STD  Y+6,R30
0002b8 83ff      	STD  Y+6+1,R31
0002b9 81ae      	LDD  R26,Y+6
0002ba 81bf      	LDD  R27,Y+6+1
0002bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x5:
0002bc 89a8      	LDD  R26,Y+16
0002bd 89b9      	LDD  R27,Y+16+1
0002be 9614      	ADIW R26,4
0002bf 940e 02fc 	CALL __GETW1P
0002c1 87ea      	STD  Y+10,R30
0002c2 87fb      	STD  Y+10+1,R31
0002c3 9508      	RET
                 
                 
                 	.CSEG
                 __ADDW2R15:
0002c4 2400      	CLR  R0
0002c5 0daf      	ADD  R26,R15
0002c6 1db0      	ADC  R27,R0
0002c7 9508      	RET
                 
                 __ANEGW1:
0002c8 95f1      	NEG  R31
0002c9 95e1      	NEG  R30
0002ca 40f0      	SBCI R31,0
0002cb 9508      	RET
                 
                 __DIVW21U:
0002cc 2400      	CLR  R0
0002cd 2411      	CLR  R1
0002ce e190      	LDI  R25,16
                 __DIVW21U1:
0002cf 0faa      	LSL  R26
0002d0 1fbb      	ROL  R27
0002d1 1c00      	ROL  R0
0002d2 1c11      	ROL  R1
0002d3 1a0e      	SUB  R0,R30
0002d4 0a1f      	SBC  R1,R31
0002d5 f418      	BRCC __DIVW21U2
0002d6 0e0e      	ADD  R0,R30
0002d7 1e1f      	ADC  R1,R31
0002d8 c001      	RJMP __DIVW21U3
                 __DIVW21U2:
0002d9 60a1      	SBR  R26,1
                 __DIVW21U3:
0002da 959a      	DEC  R25
0002db f799      	BRNE __DIVW21U1
0002dc 01fd      	MOVW R30,R26
0002dd 01d0      	MOVW R26,R0
0002de 9508      	RET
                 
                 __DIVW21:
0002df d00e      	RCALL __CHKSIGNW
0002e0 dfeb      	RCALL __DIVW21U
0002e1 f40e      	BRTC __DIVW211
0002e2 dfe5      	RCALL __ANEGW1
                 __DIVW211:
0002e3 9508      	RET
                 
                 __MANDW12:
0002e4 94e8      	CLT
0002e5 fff7      	SBRS R31,7
0002e6 c002      	RJMP __MANDW121
0002e7 dfe0      	RCALL __ANEGW1
0002e8 9468      	SET
                 __MANDW121:
0002e9 23ea      	AND  R30,R26
0002ea 23fb      	AND  R31,R27
0002eb f40e      	BRTC __MANDW122
0002ec dfdb      	RCALL __ANEGW1
                 __MANDW122:
0002ed 9508      	RET
                 
                 __CHKSIGNW:
0002ee 94e8      	CLT
0002ef fff7      	SBRS R31,7
0002f0 c002      	RJMP __CHKSW1
0002f1 dfd6      	RCALL __ANEGW1
0002f2 9468      	SET
                 __CHKSW1:
0002f3 ffb7      	SBRS R27,7
0002f4 c006      	RJMP __CHKSW2
0002f5 95a0      	COM  R26
0002f6 95b0      	COM  R27
0002f7 9611      	ADIW R26,1
0002f8 f800      	BLD  R0,0
0002f9 9403      	INC  R0
0002fa fa00      	BST  R0,0
                 __CHKSW2:
0002fb 9508      	RET
                 
                 __GETW1P:
0002fc 91ed      	LD   R30,X+
0002fd 91fc      	LD   R31,X
0002fe 9711      	SBIW R26,1
0002ff 9508      	RET
                 
                 __GETW1PF:
000300 9005      	LPM  R0,Z+
000301 91f4      	LPM  R31,Z
000302 2de0      	MOV  R30,R0
000303 9508      	RET
                 
                 __SAVELOCR6:
000304 935a      	ST   -Y,R21
                 __SAVELOCR5:
000305 934a      	ST   -Y,R20
                 __SAVELOCR4:
000306 933a      	ST   -Y,R19
                 __SAVELOCR3:
000307 932a      	ST   -Y,R18
                 __SAVELOCR2:
000308 931a      	ST   -Y,R17
000309 930a      	ST   -Y,R16
00030a 9508      	RET
                 
                 __LOADLOCR6:
00030b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00030c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00030d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00030e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00030f 8119      	LDD  R17,Y+1
000310 8108      	LD   R16,Y
000311 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  19 r1 :   5 r2 :   0 r3 :   0 r4 :   5 r5 :   3 r6 :   2 r7 :   1 
r8 :   0 r9 :   2 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  35 r17:  30 r18:  27 r19:   8 r20:   9 r21:  17 r22:   4 r23:   0 
r24:   9 r25:   4 r26:  69 r27:  40 r28:  14 r29:   1 r30: 161 r31:  55 
x  :  16 y  : 144 z  :  14 
Registers used: 26 out of 35 (74.3%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   4 add   :   5 
adiw  :  18 and   :   2 andi  :   4 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :  15 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   6 
brlt  :   0 brmi  :   0 brne  :  22 brpl  :   1 brsh  :   2 brtc  :   2 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 call  :  36 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  13 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   2 
cp    :   4 cpc   :   2 cpi   :  30 cpse  :   0 dec   :   2 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   2 inc   :   1 jmp   :  22 ld    :  16 ldd   :  70 ldi   :  71 
lds   :   0 lpm   :  14 lsl   :   1 lsr   :   0 mov   :  12 movw  :  13 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   0 
ori   :   6 out   :  41 pop   :   1 push  :   1 rcall :  10 ret   :  23 
reti  :   0 rjmp  :  60 rol   :   3 ror   :   0 sbc   :   2 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   1 sbiw  :  12 sbr   :   1 sbrc  :   2 
sbrs  :  13 sec   :   0 seh   :   0 sei   :   0 sen   :   0 ser   :   0 
ses   :   0 set   :   2 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  45 std   :  31 sts   :   3 sub   :   2 subi  :  17 swap  :   0 
tst   :   4 wdr   :   0 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000624   1492     80   1572   32768   4.8%
[.dseg] 0x000060 0x00028b      0     43     43    2048   2.1%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 6 warnings
