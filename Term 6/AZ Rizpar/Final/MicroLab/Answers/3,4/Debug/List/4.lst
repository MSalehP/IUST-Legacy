
AVRASM ver. 2.1.30  C:\Users\Saleh\Desktop\MicroLab\Answers\3,4\Debug\List\4.asm Tue Jun 11 04:02:46 2024

C:\Users\Saleh\Desktop\MicroLab\Answers\3,4\Debug\List\4.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Saleh\Desktop\MicroLab\Answers\3,4\Debug\List\4.asm(1089): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _counter=R4
                 	.DEF _counter_msb=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0041 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 006e 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 3130
00002b 3332
00002c 3534
00002d 3736      	.DB  0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37
00002e 3938
00002f 4241
000030 4443
000031 4645      	.DB  0x38,0x39,0x41,0x42,0x43,0x44,0x45,0x46
                 _0x4:
000032 063f
000033 4f5b
000034 6d66
000035 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
000036 6f7f
000037 7c77
000038 5e39
000039 7179      	.DB  0x7F,0x6F,0x77,0x7C,0x39,0x5E,0x79,0x71
                 
                 __GLOBAL_INI_TBL:
00003a 0010      	.DW  0x10
00003b 0260      	.DW  _HEXVALUE
00003c 0054      	.DW  _0x3*2
                 
00003d 0010      	.DW  0x10
00003e 0270      	.DW  _code
00003f 0064      	.DW  _0x4*2
                 
                 _0xFFFFFFFF:
000040 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000041 94f8      	CLI
000042 27ee      	CLR  R30
000043 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000044 e0f1      	LDI  R31,1
000045 bffb      	OUT  GICR,R31
000046 bfeb      	OUT  GICR,R30
000047 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000048 e08d      	LDI  R24,(14-2)+1
000049 e0a2      	LDI  R26,2
00004a 27bb      	CLR  R27
                 __CLEAR_REG:
00004b 93ed      	ST   X+,R30
00004c 958a      	DEC  R24
00004d f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00004e e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00004f e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000050 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000051 93ed      	ST   X+,R30
000052 9701      	SBIW R24,1
000053 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000054 e7e4      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000055 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000056 9185      	LPM  R24,Z+
000057 9195      	LPM  R25,Z+
000058 9700      	SBIW R24,0
000059 f061      	BREQ __GLOBAL_INI_END
00005a 91a5      	LPM  R26,Z+
00005b 91b5      	LPM  R27,Z+
00005c 9005      	LPM  R0,Z+
00005d 9015      	LPM  R1,Z+
00005e 01bf      	MOVW R22,R30
00005f 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000060 9005      	LPM  R0,Z+
000061 920d      	ST   X+,R0
000062 9701      	SBIW R24,1
000063 f7e1      	BRNE __GLOBAL_INI_LOOP
000064 01fb      	MOVW R30,R22
000065 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000066 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000067 bfed      	OUT  SPL,R30
000068 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000069 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00006a e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00006b e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00006c 940c 0081 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;//4
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;
                 ;char HEXVALUE[] = {'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'};
                 
                 	.DSEG
                 ;char code[] = { 0x3F, 0x06, 0x5B, 0x4F,0x66,0x6D,0x7D,0x07,0x7F,0x6F, 0x77,0x7C, 0x39 , 0x5E, 0x79, 0x71 }  ;
                 ;int counter;
                 ;
                 ;// Timer 0 output compare interrupt service routine
                 ;interrupt [TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 000C {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
00006e 93ea      	ST   -Y,R30
00006f 93fa      	ST   -Y,R31
000070 b7ef      	IN   R30,SREG
000071 93ea      	ST   -Y,R30
                 ; 0000 000D     counter++;
000072 01f2      	MOVW R30,R4
000073 9631      	ADIW R30,1
000074 012f      	MOVW R4,R30
                 ; 0000 000E     if (counter == 2)
000075 e0e2      	LDI  R30,LOW(2)
000076 e0f0      	LDI  R31,HIGH(2)
000077 15e4      	CP   R30,R4
000078 05f5      	CPC  R31,R5
000079 f411      	BRNE _0x5
                 ; 0000 000F         counter=0;
00007a 2444      	CLR  R4
00007b 2455      	CLR  R5
                 ; 0000 0010 
                 ; 0000 0011 }
                 _0x5:
00007c 91e9      	LD   R30,Y+
00007d bfef      	OUT  SREG,R30
00007e 91f9      	LD   R31,Y+
00007f 91e9      	LD   R30,Y+
000080 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void main(void)
                 ; 0000 0017 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0018     PORTC=0x00;
000081 e0e0      	LDI  R30,LOW(0)
000082 bbe5      	OUT  0x15,R30
                 ; 0000 0019     PORTD=0x00;
000083 bbe2      	OUT  0x12,R30
                 ; 0000 001A     DDRC=0xFF;
000084 efef      	LDI  R30,LOW(255)
000085 bbe4      	OUT  0x14,R30
                 ; 0000 001B     DDRB=0xFF;
000086 bbe7      	OUT  0x17,R30
                 ; 0000 001C     DDRD=0x00;
000087 e0e0      	LDI  R30,LOW(0)
000088 bbe1      	OUT  0x11,R30
                 ; 0000 001D 
                 ; 0000 001E     // Timer/Counter 0 initialization
                 ; 0000 001F     // Clock source: System Clock
                 ; 0000 0020     // Clock value: 7.813 kHz
                 ; 0000 0021     // Mode: CTC top=OCR0
                 ; 0000 0022     // OC0 output: Disconnected
                 ; 0000 0023     TCCR0=0x0C;
000089 e0ec      	LDI  R30,LOW(12)
00008a bfe3      	OUT  0x33,R30
                 ; 0000 0024     TCNT0=0x00;
00008b e0e0      	LDI  R30,LOW(0)
00008c bfe2      	OUT  0x32,R30
                 ; 0000 0025     OCR0=0x63;
00008d e6e3      	LDI  R30,LOW(99)
00008e bfec      	OUT  0x3C,R30
                 ; 0000 0026 
                 ; 0000 0027     // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 0028     TIMSK=0x12;
00008f e1e2      	LDI  R30,LOW(18)
000090 bfe9      	OUT  0x39,R30
                 ; 0000 0029 
                 ; 0000 002A     // Global enable interrupts
                 ; 0000 002B     #asm("sei")
000091 9478      	sei
                 ; 0000 002C 
                 ; 0000 002D     while (1)
                 _0x6:
                 ; 0000 002E     {
                 ; 0000 002F         unsigned int number = 0;
                 ; 0000 0030         int rem , index = 0;
                 ; 0000 0031         char hex[2]={'',''};
                 ; 0000 0032 
                 ; 0000 0033         if(PIND.0 == 1)
000092 9728      	SBIW R28,8
000093 e0e0      	LDI  R30,LOW(0)
000094 83e8      	ST   Y,R30
000095 83e9      	STD  Y+1,R30
000096 83ea      	STD  Y+2,R30
000097 83eb      	STD  Y+3,R30
000098 83ec      	STD  Y+4,R30
000099 83ed      	STD  Y+5,R30
00009a 83ee      	STD  Y+6,R30
00009b 83ef      	STD  Y+7,R30
                 ;	number -> Y+6
                 ;	rem -> Y+4
                 ;	index -> Y+2
                 ;	hex -> Y+0
00009c 9b80      	SBIS 0x10,0
00009d c005      	RJMP _0x9
                 ; 0000 0034         {
                 ; 0000 0035             number += 1;
00009e 81ee      	LDD  R30,Y+6
00009f 81ff      	LDD  R31,Y+6+1
0000a0 9631      	ADIW R30,1
0000a1 83ee      	STD  Y+6,R30
0000a2 83ff      	STD  Y+6+1,R31
                 ; 0000 0036         }
                 ; 0000 0037 
                 ; 0000 0038         if(PIND.1 == 1)
                 _0x9:
0000a3 9b81      	SBIS 0x10,1
0000a4 c005      	RJMP _0xA
                 ; 0000 0039         {
                 ; 0000 003A             number += 2;
0000a5 81ee      	LDD  R30,Y+6
0000a6 81ff      	LDD  R31,Y+6+1
0000a7 9632      	ADIW R30,2
0000a8 83ee      	STD  Y+6,R30
0000a9 83ff      	STD  Y+6+1,R31
                 ; 0000 003B         }
                 ; 0000 003C 
                 ; 0000 003D         if(PIND.2 == 1)
                 _0xA:
0000aa 9b82      	SBIS 0x10,2
0000ab c005      	RJMP _0xB
                 ; 0000 003E         {
                 ; 0000 003F             number += 4;
0000ac 81ee      	LDD  R30,Y+6
0000ad 81ff      	LDD  R31,Y+6+1
0000ae 9634      	ADIW R30,4
0000af 83ee      	STD  Y+6,R30
0000b0 83ff      	STD  Y+6+1,R31
                 ; 0000 0040         }
                 ; 0000 0041 
                 ; 0000 0042         if(PIND.3 == 1)
                 _0xB:
0000b1 9b83      	SBIS 0x10,3
0000b2 c005      	RJMP _0xC
                 ; 0000 0043         {
                 ; 0000 0044             number += 8;
0000b3 81ee      	LDD  R30,Y+6
0000b4 81ff      	LDD  R31,Y+6+1
0000b5 9638      	ADIW R30,8
0000b6 83ee      	STD  Y+6,R30
0000b7 83ff      	STD  Y+6+1,R31
                 ; 0000 0045         }
                 ; 0000 0046 
                 ; 0000 0047         if(PIND.4 == 1)
                 _0xC:
0000b8 9b84      	SBIS 0x10,4
0000b9 c005      	RJMP _0xD
                 ; 0000 0048         {
                 ; 0000 0049             number += 16;
0000ba 81ee      	LDD  R30,Y+6
0000bb 81ff      	LDD  R31,Y+6+1
0000bc 9670      	ADIW R30,16
0000bd 83ee      	STD  Y+6,R30
0000be 83ff      	STD  Y+6+1,R31
                 ; 0000 004A         }
                 ; 0000 004B 
                 ; 0000 004C         if(PIND.5 == 1)
                 _0xD:
0000bf 9b85      	SBIS 0x10,5
0000c0 c005      	RJMP _0xE
                 ; 0000 004D         {
                 ; 0000 004E             number += 32;
0000c1 81ee      	LDD  R30,Y+6
0000c2 81ff      	LDD  R31,Y+6+1
0000c3 96b0      	ADIW R30,32
0000c4 83ee      	STD  Y+6,R30
0000c5 83ff      	STD  Y+6+1,R31
                 ; 0000 004F         }
                 ; 0000 0050 
                 ; 0000 0051         if(PIND.6 == 1)
                 _0xE:
0000c6 9b86      	SBIS 0x10,6
0000c7 c006      	RJMP _0xF
                 ; 0000 0052         {
                 ; 0000 0053             number += 64;
0000c8 81ee      	LDD  R30,Y+6
0000c9 81ff      	LDD  R31,Y+6+1
0000ca 5ce0      	SUBI R30,LOW(-64)
0000cb 4fff      	SBCI R31,HIGH(-64)
0000cc 83ee      	STD  Y+6,R30
0000cd 83ff      	STD  Y+6+1,R31
                 ; 0000 0054         }
                 ; 0000 0055 
                 ; 0000 0056         if(PIND.7 == 1)
                 _0xF:
0000ce 9b87      	SBIS 0x10,7
0000cf c006      	RJMP _0x10
                 ; 0000 0057         {
                 ; 0000 0058             number += 128;
0000d0 81ee      	LDD  R30,Y+6
0000d1 81ff      	LDD  R31,Y+6+1
0000d2 58e0      	SUBI R30,LOW(-128)
0000d3 4fff      	SBCI R31,HIGH(-128)
0000d4 83ee      	STD  Y+6,R30
0000d5 83ff      	STD  Y+6+1,R31
                 ; 0000 0059         }
                 ; 0000 005A 
                 ; 0000 005B         while(number !=0)
                 _0x10:
                 _0x11:
0000d6 81ee      	LDD  R30,Y+6
0000d7 81ff      	LDD  R31,Y+6+1
0000d8 9730      	SBIW R30,0
0000d9 f0d9      	BREQ _0x13
                 ; 0000 005C         {
                 ; 0000 005D             rem = number % 16;
0000da 70ef      	ANDI R30,LOW(0xF)
0000db 70f0      	ANDI R31,HIGH(0xF)
0000dc 83ec      	STD  Y+4,R30
0000dd 83fd      	STD  Y+4+1,R31
                 ; 0000 005E 
                 ; 0000 005F             hex[index] = HEXVALUE[rem];
0000de 81ea      	LDD  R30,Y+2
0000df 81fb      	LDD  R31,Y+2+1
0000e0 01de      	MOVW R26,R28
0000e1 0fae      	ADD  R26,R30
0000e2 1fbf      	ADC  R27,R31
0000e3 81ec      	LDD  R30,Y+4
0000e4 81fd      	LDD  R31,Y+4+1
0000e5 5ae0      	SUBI R30,LOW(-_HEXVALUE)
0000e6 4ffd      	SBCI R31,HIGH(-_HEXVALUE)
0000e7 81e0      	LD   R30,Z
0000e8 93ec      	ST   X,R30
                 ; 0000 0060 
                 ; 0000 0061             number /= 16;
0000e9 81ee      	LDD  R30,Y+6
0000ea 81ff      	LDD  R31,Y+6+1
0000eb 940e 0166 	CALL __LSRW4
0000ed 83ee      	STD  Y+6,R30
0000ee 83ff      	STD  Y+6+1,R31
                 ; 0000 0062 
                 ; 0000 0063             index++;
0000ef 81ea      	LDD  R30,Y+2
0000f0 81fb      	LDD  R31,Y+2+1
0000f1 9631      	ADIW R30,1
0000f2 83ea      	STD  Y+2,R30
0000f3 83fb      	STD  Y+2+1,R31
                 ; 0000 0064         }
0000f4 cfe1      	RJMP _0x11
                 _0x13:
                 ; 0000 0065 
                 ; 0000 0066         if(counter == 0)
0000f5 2c04      	MOV  R0,R4
0000f6 2805      	OR   R0,R5
0000f7 f549      	BRNE _0x14
                 ; 0000 0067         {
                 ; 0000 0068             PORTB = 0b11111101;
0000f8 efed      	LDI  R30,LOW(253)
0000f9 bbe8      	OUT  0x18,R30
                 ; 0000 0069             PORTC = code[hex[0]-48];
0000fa 81e8      	LD   R30,Y
0000fb d059      	RCALL SUBOPT_0x0
                 ; 0000 006A             if(hex[0] == 'A')
0000fc 81a8      	LD   R26,Y
0000fd 34a1      	CPI  R26,LOW(0x41)
0000fe f419      	BRNE _0x15
                 ; 0000 006B              PORTC = code[10];
                +
0000ff 91e0 027a+LDS R30 , _code + ( 10 )
                 	__GETB1MN _code,10
000101 c01d      	RJMP _0x2E
                 ; 0000 006C             else if(hex[0] == 'B')
                 _0x15:
000102 81a8      	LD   R26,Y
000103 34a2      	CPI  R26,LOW(0x42)
000104 f419      	BRNE _0x17
                 ; 0000 006D              PORTC = code[11];
                +
000105 91e0 027b+LDS R30 , _code + ( 11 )
                 	__GETB1MN _code,11
000107 c017      	RJMP _0x2E
                 ; 0000 006E              else if(hex[0] == 'C')
                 _0x17:
000108 81a8      	LD   R26,Y
000109 34a3      	CPI  R26,LOW(0x43)
00010a f419      	BRNE _0x19
                 ; 0000 006F              PORTC = code[12];
                +
00010b 91e0 027c+LDS R30 , _code + ( 12 )
                 	__GETB1MN _code,12
00010d c011      	RJMP _0x2E
                 ; 0000 0070              else if(hex[0] == 'D')
                 _0x19:
00010e 81a8      	LD   R26,Y
00010f 34a4      	CPI  R26,LOW(0x44)
000110 f419      	BRNE _0x1B
                 ; 0000 0071              PORTC = code[13];
                +
000111 91e0 027d+LDS R30 , _code + ( 13 )
                 	__GETB1MN _code,13
000113 c00b      	RJMP _0x2E
                 ; 0000 0072              else if(hex[0] == 'E')
                 _0x1B:
000114 81a8      	LD   R26,Y
000115 34a5      	CPI  R26,LOW(0x45)
000116 f419      	BRNE _0x1D
                 ; 0000 0073              PORTC = code[14];
                +
000117 91e0 027e+LDS R30 , _code + ( 14 )
                 	__GETB1MN _code,14
000119 c005      	RJMP _0x2E
                 ; 0000 0074              else if(hex[0] == 'F')
                 _0x1D:
00011a 81a8      	LD   R26,Y
00011b 34a6      	CPI  R26,LOW(0x46)
00011c f419      	BRNE _0x1F
                 ; 0000 0075              PORTC = code[15];
                +
00011d 91e0 027f+LDS R30 , _code + ( 15 )
                 	__GETB1MN _code,15
                 _0x2E:
00011f bbe5      	OUT  0x15,R30
                 ; 0000 0076         }
                 _0x1F:
                 ; 0000 0077 
                 ; 0000 0078         else if(counter == 1)
000120 c02d      	RJMP _0x20
                 _0x14:
000121 e0e1      	LDI  R30,LOW(1)
000122 e0f0      	LDI  R31,HIGH(1)
000123 15e4      	CP   R30,R4
000124 05f5      	CPC  R31,R5
000125 f541      	BRNE _0x21
                 ; 0000 0079         {
                 ; 0000 007A             PORTB = 0b11111110;
000126 efee      	LDI  R30,LOW(254)
000127 bbe8      	OUT  0x18,R30
                 ; 0000 007B             PORTC = code[hex[1]-48];
000128 81e9      	LDD  R30,Y+1
000129 d02b      	RCALL SUBOPT_0x0
                 ; 0000 007C             if(hex[1] == 'A')
00012a 81a9      	LDD  R26,Y+1
00012b 34a1      	CPI  R26,LOW(0x41)
00012c f419      	BRNE _0x22
                 ; 0000 007D              PORTC = code[10];
                +
00012d 91e0 027a+LDS R30 , _code + ( 10 )
                 	__GETB1MN _code,10
00012f c01d      	RJMP _0x2F
                 ; 0000 007E             else if(hex[1] == 'B')
                 _0x22:
000130 81a9      	LDD  R26,Y+1
000131 34a2      	CPI  R26,LOW(0x42)
000132 f419      	BRNE _0x24
                 ; 0000 007F              PORTC = code[11];
                +
000133 91e0 027b+LDS R30 , _code + ( 11 )
                 	__GETB1MN _code,11
000135 c017      	RJMP _0x2F
                 ; 0000 0080              else if(hex[1] == 'C')
                 _0x24:
000136 81a9      	LDD  R26,Y+1
000137 34a3      	CPI  R26,LOW(0x43)
000138 f419      	BRNE _0x26
                 ; 0000 0081              PORTC = code[12];
                +
000139 91e0 027c+LDS R30 , _code + ( 12 )
                 	__GETB1MN _code,12
00013b c011      	RJMP _0x2F
                 ; 0000 0082              else if(hex[1] == 'D')
                 _0x26:
00013c 81a9      	LDD  R26,Y+1
00013d 34a4      	CPI  R26,LOW(0x44)
00013e f419      	BRNE _0x28
                 ; 0000 0083              PORTC = code[13];
                +
00013f 91e0 027d+LDS R30 , _code + ( 13 )
                 	__GETB1MN _code,13
000141 c00b      	RJMP _0x2F
                 ; 0000 0084              else if(hex[1] == 'E')
                 _0x28:
000142 81a9      	LDD  R26,Y+1
000143 34a5      	CPI  R26,LOW(0x45)
000144 f419      	BRNE _0x2A
                 ; 0000 0085              PORTC = code[14];
                +
000145 91e0 027e+LDS R30 , _code + ( 14 )
                 	__GETB1MN _code,14
000147 c005      	RJMP _0x2F
                 ; 0000 0086              else if(hex[1] == 'F')
                 _0x2A:
000148 81a9      	LDD  R26,Y+1
000149 34a6      	CPI  R26,LOW(0x46)
00014a f419      	BRNE _0x2C
                 ; 0000 0087              PORTC = code[15];
                +
00014b 91e0 027f+LDS R30 , _code + ( 15 )
                 	__GETB1MN _code,15
                 _0x2F:
00014d bbe5      	OUT  0x15,R30
                 ; 0000 0088         }
                 _0x2C:
                 ; 0000 0089 
                 ; 0000 008A         delay_ms(5);
                 _0x21:
                 _0x20:
00014e e0a5      	LDI  R26,LOW(5)
00014f e0b0      	LDI  R27,0
000150 940e 015c 	CALL _delay_ms
                 ; 0000 008B     }
000152 9628      	ADIW R28,8
000153 cf3e      	RJMP _0x6
                 ; 0000 008C }
                 _0x2D:
000154 cfff      	RJMP _0x2D
                 ; .FEND
                 
                 	.DSEG
                 _HEXVALUE:
000260           	.BYTE 0x10
                 _code:
000270           	.BYTE 0x10
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
000155 e0f0      	LDI  R31,0
000156 97f0      	SBIW R30,48
000157 59e0      	SUBI R30,LOW(-_code)
000158 4ffd      	SBCI R31,HIGH(-_code)
000159 81e0      	LD   R30,Z
00015a bbe5      	OUT  0x15,R30
00015b 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00015c 9610      	adiw r26,0
00015d f039      	breq __delay_ms1
                 __delay_ms0:
                +
00015e ed80     +LDI R24 , LOW ( 0x7D0 )
00015f e097     +LDI R25 , HIGH ( 0x7D0 )
                +__DELAY_USW_LOOP :
000160 9701     +SBIW R24 , 1
000161 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0x7D0
000162 95a8      	wdr
000163 9711      	sbiw r26,1
000164 f7c9      	brne __delay_ms0
                 __delay_ms1:
000165 9508      	ret
                 
                 __LSRW4:
000166 95f6      	LSR  R31
000167 95e7      	ROR  R30
                 __LSRW3:
000168 95f6      	LSR  R31
000169 95e7      	ROR  R30
                 __LSRW2:
00016a 95f6      	LSR  R31
00016b 95e7      	ROR  R30
00016c 95f6      	LSR  R31
00016d 95e7      	ROR  R30
00016e 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   6 r1 :   1 r2 :   0 r3 :   0 r4 :   6 r5 :   4 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   3 r26:  32 r27:   4 r28:   4 r29:   1 r30: 119 r31:  44 
x  :   4 y  :  76 z  :   9 
Registers used: 16 out of 35 (45.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   1 
adiw  :  10 and   :   0 andi  :   2 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   3 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  20 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   2 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   4 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   2 cpc   :   2 cpi   :  12 cpse  :   0 dec   :   1 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   0 jmp   :  22 ld    :  12 ldd   :  33 ldi   :  31 
lds   :  12 lpm   :   7 lsl   :   0 lsr   :   4 mov   :   1 movw  :   6 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   0 out   :  21 pop   :   0 push  :   0 rcall :   2 ret   :   3 
reti  :   1 rjmp  :  23 rol   :   0 ror   :   4 sbc   :   0 sbci  :   4 
sbi   :   0 sbic  :   0 sbis  :   8 sbiw  :   8 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   8 std   :  29 sts   :   0 sub   :   0 subi  :   4 swap  :   0 
tst   :   0 wdr   :   1 
Instructions used: 38 out of 116 (32.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0002de    688     46    734   32768   2.2%
[.dseg] 0x000060 0x000280      0     32     32    2048   1.6%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 2 warnings
