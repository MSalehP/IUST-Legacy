/*******************************************************
This program was created by the
CodeWizardAVR V3.12 Advanced
Automatic Program Generator
© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 5/28/2022
Author  : 
Company : 
Comments: 


Chip type               : ATmega32
Program type            : Application
AVR Core Clock frequency: 8.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*******************************************************/

#include <mega32.h>
#include <delay.h>

const unsigned char image_code[71]=
{
	0x00,	//	0001		. . . . . . . . 
	0xF6,	//	0002		# # # # . # # . 
	0xF6,	//	0003		# # # # . # # . 
	0xF6,	//	0004		# # # # . # # . 
	0xF6,	//	0005		# # # # . # # . 
	0xFF,	//	0006		# # # # # # # # 
	0x9F,	//	0007		# . . # # # # # 
	0x6B,	//	0008		. # # . # . # # 
	0x6B,	//	0009		. # # . # . # # 
	0x6B,	//	000A		. # # . # . # # 
	0x07,	//	000B		. . . . . # # # 
	0xFF,	//	000C		# # # # # # # # 
	0x80,	//	000D		# . . . . . . . 
	0x7B,	//	000E		. # # # # . # # 
	0x7B,	//	000F		. # # # # . # # 
	0xFF,	//	0010		# # # # # # # # 
	0x87,	//	0011		# . . . . # # # 
	0x6B,	//	0012		. # # . # . # # 
	0x6B,	//	0013		. # # . # . # # 
	0x6B,	//	0014		. # # . # . # # 
	0xA7,	//	0015		# . # . . # # # 
	0xFF,	//	0016		# # # # # # # # 
	0x03,	//	0017		. . . . . . # # 
	0xFB,	//	0018		# # # # # . # # 
	0xFB,	//	0019		# # # # # . # # 
	0x07,	//	001A		. . . . . # # # 
	0xFB,	//	001B		# # # # # . # # 
	0xFB,	//	001C		# # # # # . # # 
	0x07,	//	001D		. . . . . # # # 
	0xFF,	//	001E		# # # # # # # # 
	0x87,	//	001F		# . . . . # # # 
	0x6B,	//	0020		. # # . # . # # 
	0x6B,	//	0021		. # # . # . # # 
	0x6B,	//	0022		. # # . # . # # 
	0xA7,	//	0023		# . # . . # # # 
	0xFF,	//	0024		# # # # # # # # 
	0x00,	//	0025		. . . . . . . . 
	0xFB,	//	0026		# # # # # . # # 
	0xFB,	//	0027		# # # # # . # # 
	0xFB,	//	0028		# # # # # . # # 
	0x07,	//	0029		. . . . . # # # 
	0xFF,	//	002A		# # # # # # # # 
	0xFF,	//	002B		# # # # # # # # 
    0xFF,    //    002C        # # # # # # # # 
    0xFF,    //    002D        # # # # # # # # 
    0xFF,    //    002E        # # # # # # # # 
    0xFF,    //    002F        # # # # # # # # 
    0xFF,    //    0030        # # # # # # # # 
    0xFF,    //    0031        # # # # # # # # 
    0xFF,    //    0032        # # # # # # # # 
    0xFF,    //    0033        # # # # # # # # 
    0xFF,    //    0034        # # # # # # # # 
    0xFF,    //    0035        # # # # # # # # 
	0xFF,	//	0036		# # # # # # # # 
	0xFF,	//	0037		# # # # # # # # 
	0xFF,	//	0038		# # # # # # # # 
	0xFF,	//	0039		# # # # # # # # 
	0xFF,	//	003A		# # # # # # # # 
	0xFF,	//	003B		# # # # # # # # 
	0xFF,	//	003C		# # # # # # # # 
	0xFF,	//	003D		# # # # # # # # 
	0xFF,	//	003E		# # # # # # # # 
	0xFF,	//	003F		# # # # # # # # 
	0xFF,	//	0040		# # # # # # # # 
	0xFF,	//	0041		# # # # # # # # 
	0xFF,	//	0042		# # # # # # # # 
	0xFF,	//	0043		# # # # # # # # 
	0xFF,	//	0044		# # # # # # # # 
	0xFF,	//	0045		# # # # # # # # 
	0xFF,	//	0046		# # # # # # # # 
	0xFF 	//	0047		# # # # # # # # 
};

void main(void)
{
// Declare your local variables here

// Input/Output Ports initialization
// Port A initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRA=(1<<DDA7) | (1<<DDA6) | (1<<DDA5) | (1<<DDA4) | (1<<DDA3) | (1<<DDA2) | (1<<DDA1) | (1<<DDA0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);

// Port C initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRC=(1<<DDC7) | (1<<DDC6) | (1<<DDC5) | (1<<DDC4) | (1<<DDC3) | (1<<DDC2) | (1<<DDC1) | (1<<DDC0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTC=(0<<PORTC7) | (0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);

// Port D initialization
// Function: Bit7=Out Bit6=Out Bit5=Out Bit4=Out Bit3=Out Bit2=Out Bit1=Out Bit0=Out 
DDRD=(1<<DDD7) | (1<<DDD6) | (1<<DDD5) | (1<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
// State: Bit7=0 Bit6=0 Bit5=0 Bit4=0 Bit3=0 Bit2=0 Bit1=0 Bit0=0 
PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);

while (1)
      {
      unsigned int i, offset = 18;
      for (; offset < 18 + 50; offset++) {
            int repeat = 0;
            for (; repeat < 5; repeat++) {
                unsigned long scan = 1;
                PORTA = 0; //C9-C16
                for (i = 0; i < 8; i++) { 
                    PORTD = scan & 0xff;
                    PORTC = image_code[(offset + i) % 50];
                    scan <<= 1;                           
                    delay_ms(2);
                }
                PORTD = 0; //C1-C8
                for (i = 8; i < 16; i++) {
                    PORTA = scan >> 8;
                    PORTC = image_code[(offset + i) % 50];
                    scan <<= 1;
                    delay_ms(2);
                }
            }      
      }
      
      }
}
