
AVRASM ver. 2.1.30  C:\Users\Saleh\Desktop\New folder\Debug\List\final.asm Tue Jun 11 09:19:10 2024

C:\Users\Saleh\Desktop\New folder\Debug\List\final.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Saleh\Desktop\New folder\Debug\List\final.asm(1089): warning: Register r5 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 8.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _CNT=R4
                 	.DEF _CNT_msb=R5
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0039 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0066 	JMP  _timer0_comp_isr
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _0x3:
00002a 063f
00002b 4f5b
00002c 6d66
00002d 077d      	.DB  0x3F,0x6,0x5B,0x4F,0x66,0x6D,0x7D,0x7
00002e 6f7f      	.DB  0x7F,0x6F
                 _0x8:
00002f 0000
000030 0000
000031 0000
000032 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000033 0000
C:\Users\Saleh\Desktop\New folder\Debug\List\final.asm(1125): warning: .cseg .db misalignment - padding zero byte
000034 0000      	.DB  0x0,0x0,0x0
                 
                 __GLOBAL_INI_TBL:
000035 000a      	.DW  0x0A
000036 0260      	.DW  _code
000037 0054      	.DW  _0x3*2
                 
                 _0xFFFFFFFF:
000038 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000039 94f8      	CLI
00003a 27ee      	CLR  R30
00003b bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00003c e0f1      	LDI  R31,1
00003d bffb      	OUT  GICR,R31
00003e bfeb      	OUT  GICR,R30
00003f bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000040 e08d      	LDI  R24,(14-2)+1
000041 e0a2      	LDI  R26,2
000042 27bb      	CLR  R27
                 __CLEAR_REG:
000043 93ed      	ST   X+,R30
000044 958a      	DEC  R24
000045 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000046 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000047 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000048 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000049 93ed      	ST   X+,R30
00004a 9701      	SBIW R24,1
00004b f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00004c e6ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00004d e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00004e 9185      	LPM  R24,Z+
00004f 9195      	LPM  R25,Z+
000050 9700      	SBIW R24,0
000051 f061      	BREQ __GLOBAL_INI_END
000052 91a5      	LPM  R26,Z+
000053 91b5      	LPM  R27,Z+
000054 9005      	LPM  R0,Z+
000055 9015      	LPM  R1,Z+
000056 01bf      	MOVW R22,R30
000057 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000058 9005      	LPM  R0,Z+
000059 920d      	ST   X+,R0
00005a 9701      	SBIW R24,1
00005b f7e1      	BRNE __GLOBAL_INI_LOOP
00005c 01fb      	MOVW R30,R22
00005d cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00005e e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00005f bfed      	OUT  SPL,R30
000060 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000061 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000062 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000063 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000064 940c 0079 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;// MOHAMMAD SALEH PAZHAND - 400521171
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;char code[] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F};
                 
                 	.DSEG
                 ;int CNT;
                 ;
                 ;interrupt[TIM0_COMP] void timer0_comp_isr(void)
                 ; 0000 0009 {
                 
                 	.CSEG
                 _timer0_comp_isr:
                 ; .FSTART _timer0_comp_isr
000066 93ea      	ST   -Y,R30
000067 93fa      	ST   -Y,R31
000068 b7ef      	IN   R30,SREG
000069 93ea      	ST   -Y,R30
                 ; 0000 000A     CNT++;
00006a 01f2      	MOVW R30,R4
00006b 9631      	ADIW R30,1
00006c 012f      	MOVW R4,R30
                 ; 0000 000B     if (CNT == 5)
00006d e0e5      	LDI  R30,LOW(5)
00006e e0f0      	LDI  R31,HIGH(5)
00006f 15e4      	CP   R30,R4
000070 05f5      	CPC  R31,R5
000071 f411      	BRNE _0x4
                 ; 0000 000C     {
                 ; 0000 000D         CNT = 0;
000072 2444      	CLR  R4
000073 2455      	CLR  R5
                 ; 0000 000E     }
                 ; 0000 000F }
                 _0x4:
000074 91e9      	LD   R30,Y+
000075 bfef      	OUT  SREG,R30
000076 91f9      	LD   R31,Y+
000077 91e9      	LD   R30,Y+
000078 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void main(void)
                 ; 0000 0015 {
                 _main:
                 ; .FSTART _main
                 ; 0000 0016     PORTC = 0x00;
000079 e0e0      	LDI  R30,LOW(0)
00007a bbe5      	OUT  0x15,R30
                 ; 0000 0017     PORTD = 0xFF;
00007b efef      	LDI  R30,LOW(255)
00007c bbe2      	OUT  0x12,R30
                 ; 0000 0018     DDRC = 0xFF;
00007d bbe4      	OUT  0x14,R30
                 ; 0000 0019     DDRA = 0xFF;
00007e bbea      	OUT  0x1A,R30
                 ; 0000 001A     DDRB = 0x00;
00007f e0e0      	LDI  R30,LOW(0)
000080 bbe7      	OUT  0x17,R30
                 ; 0000 001B     PORTB = 0xFF;
000081 efef      	LDI  R30,LOW(255)
000082 bbe8      	OUT  0x18,R30
                 ; 0000 001C     DDRD = 0x00;
000083 e0e0      	LDI  R30,LOW(0)
000084 bbe1      	OUT  0x11,R30
                 ; 0000 001D     TCCR0 = 0x0C;
000085 e0ec      	LDI  R30,LOW(12)
000086 bfe3      	OUT  0x33,R30
                 ; 0000 001E     TCNT0 = 0x00;
000087 e0e0      	LDI  R30,LOW(0)
000088 bfe2      	OUT  0x32,R30
                 ; 0000 001F     OCR0 = 0x63;
000089 e6e3      	LDI  R30,LOW(99)
00008a bfec      	OUT  0x3C,R30
                 ; 0000 0020     TIMSK = 0x12;
00008b e1e2      	LDI  R30,LOW(18)
00008c bfe9      	OUT  0x39,R30
                 ; 0000 0021 
                 ; 0000 0022 #asm("sei")
00008d 9478      	sei
                 ; 0000 0023 
                 ; 0000 0024     while (1)
                 _0x5:
                 ; 0000 0025     {
                 ; 0000 0026         unsigned int NUM = 0;
                 ; 0000 0027         int REMAINING, INDEX = 0;
                 ; 0000 0028         char RESULTARRAY[5] = {0, 0, 0, 0, 0};
                 ; 0000 0029 
                 ; 0000 002A         if (PIND .0 != 1)
00008e 972b      	SBIW R28,11
00008f e08b      	LDI  R24,11
000090 e0a0      	LDI  R26,LOW(0)
000091 e0b0      	LDI  R27,HIGH(0)
000092 e5ee      	LDI  R30,LOW(_0x8*2)
000093 e0f0      	LDI  R31,HIGH(_0x8*2)
000094 940e 0179 	CALL __INITLOCB
                 ;	NUM -> Y+9
                 ;	REMAINING -> Y+7
                 ;	INDEX -> Y+5
                 ;	RESULTARRAY -> Y+0
000096 9980      	SBIC 0x10,0
000097 c005      	RJMP _0x9
                 ; 0000 002B         {
                 ; 0000 002C             NUM += 1;
000098 85e9      	LDD  R30,Y+9
000099 85fa      	LDD  R31,Y+9+1
00009a 9631      	ADIW R30,1
00009b 87e9      	STD  Y+9,R30
00009c 87fa      	STD  Y+9+1,R31
                 ; 0000 002D         }
                 ; 0000 002E 
                 ; 0000 002F         if (PIND .1 != 1)
                 _0x9:
00009d 9981      	SBIC 0x10,1
00009e c005      	RJMP _0xA
                 ; 0000 0030         {
                 ; 0000 0031             NUM += 2;
00009f 85e9      	LDD  R30,Y+9
0000a0 85fa      	LDD  R31,Y+9+1
0000a1 9632      	ADIW R30,2
0000a2 87e9      	STD  Y+9,R30
0000a3 87fa      	STD  Y+9+1,R31
                 ; 0000 0032         }
                 ; 0000 0033 
                 ; 0000 0034         if (PIND .2 != 1)
                 _0xA:
0000a4 9982      	SBIC 0x10,2
0000a5 c005      	RJMP _0xB
                 ; 0000 0035         {
                 ; 0000 0036             NUM += 4;
0000a6 85e9      	LDD  R30,Y+9
0000a7 85fa      	LDD  R31,Y+9+1
0000a8 9634      	ADIW R30,4
0000a9 87e9      	STD  Y+9,R30
0000aa 87fa      	STD  Y+9+1,R31
                 ; 0000 0037         }
                 ; 0000 0038 
                 ; 0000 0039         if (PIND .3 != 1)
                 _0xB:
0000ab 9983      	SBIC 0x10,3
0000ac c005      	RJMP _0xC
                 ; 0000 003A         {
                 ; 0000 003B             NUM += 8;
0000ad 85e9      	LDD  R30,Y+9
0000ae 85fa      	LDD  R31,Y+9+1
0000af 9638      	ADIW R30,8
0000b0 87e9      	STD  Y+9,R30
0000b1 87fa      	STD  Y+9+1,R31
                 ; 0000 003C         }
                 ; 0000 003D 
                 ; 0000 003E         if (PIND .4 != 1)
                 _0xC:
0000b2 9984      	SBIC 0x10,4
0000b3 c005      	RJMP _0xD
                 ; 0000 003F         {
                 ; 0000 0040             NUM += 16;
0000b4 85e9      	LDD  R30,Y+9
0000b5 85fa      	LDD  R31,Y+9+1
0000b6 9670      	ADIW R30,16
0000b7 87e9      	STD  Y+9,R30
0000b8 87fa      	STD  Y+9+1,R31
                 ; 0000 0041         }
                 ; 0000 0042 
                 ; 0000 0043         if (PIND .5 != 1)
                 _0xD:
0000b9 9985      	SBIC 0x10,5
0000ba c005      	RJMP _0xE
                 ; 0000 0044         {
                 ; 0000 0045             NUM += 32;
0000bb 85e9      	LDD  R30,Y+9
0000bc 85fa      	LDD  R31,Y+9+1
0000bd 96b0      	ADIW R30,32
0000be 87e9      	STD  Y+9,R30
0000bf 87fa      	STD  Y+9+1,R31
                 ; 0000 0046         }
                 ; 0000 0047 
                 ; 0000 0048         if (PIND .6 != 1)
                 _0xE:
0000c0 9986      	SBIC 0x10,6
0000c1 c006      	RJMP _0xF
                 ; 0000 0049         {
                 ; 0000 004A             NUM += 64;
0000c2 85e9      	LDD  R30,Y+9
0000c3 85fa      	LDD  R31,Y+9+1
0000c4 5ce0      	SUBI R30,LOW(-64)
0000c5 4fff      	SBCI R31,HIGH(-64)
0000c6 87e9      	STD  Y+9,R30
0000c7 87fa      	STD  Y+9+1,R31
                 ; 0000 004B         }
                 ; 0000 004C 
                 ; 0000 004D         if (PIND .7 != 1)
                 _0xF:
0000c8 9987      	SBIC 0x10,7
0000c9 c006      	RJMP _0x10
                 ; 0000 004E         {
                 ; 0000 004F             NUM += 128;
0000ca 85e9      	LDD  R30,Y+9
0000cb 85fa      	LDD  R31,Y+9+1
0000cc 58e0      	SUBI R30,LOW(-128)
0000cd 4fff      	SBCI R31,HIGH(-128)
0000ce 87e9      	STD  Y+9,R30
0000cf 87fa      	STD  Y+9+1,R31
                 ; 0000 0050         }
                 ; 0000 0051         if (PINB .0 != 1)
                 _0x10:
0000d0 99b0      	SBIC 0x16,0
0000d1 c006      	RJMP _0x11
                 ; 0000 0052         {
                 ; 0000 0053             NUM += 256;
0000d2 85e9      	LDD  R30,Y+9
0000d3 85fa      	LDD  R31,Y+9+1
0000d4 50e0      	SUBI R30,LOW(-256)
0000d5 4fff      	SBCI R31,HIGH(-256)
0000d6 87e9      	STD  Y+9,R30
0000d7 87fa      	STD  Y+9+1,R31
                 ; 0000 0054         }
                 ; 0000 0055 
                 ; 0000 0056         if (PINB .1!= 1)
                 _0x11:
0000d8 99b1      	SBIC 0x16,1
0000d9 c006      	RJMP _0x12
                 ; 0000 0057         {
                 ; 0000 0058             NUM += 512;
0000da 85e9      	LDD  R30,Y+9
0000db 85fa      	LDD  R31,Y+9+1
0000dc 50e0      	SUBI R30,LOW(-512)
0000dd 4ffe      	SBCI R31,HIGH(-512)
0000de 87e9      	STD  Y+9,R30
0000df 87fa      	STD  Y+9+1,R31
                 ; 0000 0059         }
                 ; 0000 005A 
                 ; 0000 005B         if (PINB .2 != 1)
                 _0x12:
0000e0 99b2      	SBIC 0x16,2
0000e1 c006      	RJMP _0x13
                 ; 0000 005C         {
                 ; 0000 005D             NUM += 1024;
0000e2 85e9      	LDD  R30,Y+9
0000e3 85fa      	LDD  R31,Y+9+1
0000e4 50e0      	SUBI R30,LOW(-1024)
0000e5 4ffc      	SBCI R31,HIGH(-1024)
0000e6 87e9      	STD  Y+9,R30
0000e7 87fa      	STD  Y+9+1,R31
                 ; 0000 005E         }
                 ; 0000 005F 
                 ; 0000 0060         if (PINB .3 != 1)
                 _0x13:
0000e8 99b3      	SBIC 0x16,3
0000e9 c006      	RJMP _0x14
                 ; 0000 0061         {
                 ; 0000 0062             NUM += 2048;
0000ea 85e9      	LDD  R30,Y+9
0000eb 85fa      	LDD  R31,Y+9+1
0000ec 50e0      	SUBI R30,LOW(-2048)
0000ed 4ff8      	SBCI R31,HIGH(-2048)
0000ee 87e9      	STD  Y+9,R30
0000ef 87fa      	STD  Y+9+1,R31
                 ; 0000 0063         }
                 ; 0000 0064 
                 ; 0000 0065         if (PINB .4 != 1)
                 _0x14:
0000f0 99b4      	SBIC 0x16,4
0000f1 c006      	RJMP _0x15
                 ; 0000 0066         {
                 ; 0000 0067             NUM += 4096;
0000f2 85e9      	LDD  R30,Y+9
0000f3 85fa      	LDD  R31,Y+9+1
0000f4 50e0      	SUBI R30,LOW(-4096)
0000f5 4ff0      	SBCI R31,HIGH(-4096)
0000f6 87e9      	STD  Y+9,R30
0000f7 87fa      	STD  Y+9+1,R31
                 ; 0000 0068         }
                 ; 0000 0069 
                 ; 0000 006A         if (PINB .5 != 1)
                 _0x15:
0000f8 99b5      	SBIC 0x16,5
0000f9 c006      	RJMP _0x16
                 ; 0000 006B         {
                 ; 0000 006C             NUM += 8192;
0000fa 85e9      	LDD  R30,Y+9
0000fb 85fa      	LDD  R31,Y+9+1
0000fc 50e0      	SUBI R30,LOW(-8192)
0000fd 4ef0      	SBCI R31,HIGH(-8192)
0000fe 87e9      	STD  Y+9,R30
0000ff 87fa      	STD  Y+9+1,R31
                 ; 0000 006D         }
                 ; 0000 006E 
                 ; 0000 006F         if (PINB .6 != 1)
                 _0x16:
000100 99b6      	SBIC 0x16,6
000101 c006      	RJMP _0x17
                 ; 0000 0070         {
                 ; 0000 0071             NUM += 16384;
000102 85e9      	LDD  R30,Y+9
000103 85fa      	LDD  R31,Y+9+1
000104 50e0      	SUBI R30,LOW(-16384)
000105 4cf0      	SBCI R31,HIGH(-16384)
000106 87e9      	STD  Y+9,R30
000107 87fa      	STD  Y+9+1,R31
                 ; 0000 0072         }
                 ; 0000 0073 
                 ; 0000 0074         if (PINB .7 != 1)
                 _0x17:
000108 99b7      	SBIC 0x16,7
000109 c006      	RJMP _0x18
                 ; 0000 0075         {
                 ; 0000 0076             NUM += 32768;
00010a 85e9      	LDD  R30,Y+9
00010b 85fa      	LDD  R31,Y+9+1
00010c 50e0      	SUBI R30,LOW(-32768)
00010d 48f0      	SBCI R31,HIGH(-32768)
00010e 87e9      	STD  Y+9,R30
00010f 87fa      	STD  Y+9+1,R31
                 ; 0000 0077         }
                 ; 0000 0078 
                 ; 0000 0079         while (NUM != 0)
                 _0x18:
                 _0x19:
000110 85e9      	LDD  R30,Y+9
000111 85fa      	LDD  R31,Y+9+1
000112 9730      	SBIW R30,0
000113 f0e9      	BREQ _0x1B
                 ; 0000 007A         {
                 ; 0000 007B             REMAINING = NUM % 10;
000114 85a9      	LDD  R26,Y+9
000115 85ba      	LDD  R27,Y+9+1
000116 e0ea      	LDI  R30,LOW(10)
000117 e0f0      	LDI  R31,HIGH(10)
000118 940e 0176 	CALL __MODW21U
00011a 83ef      	STD  Y+7,R30
00011b 87f8      	STD  Y+7+1,R31
                 ; 0000 007C 
                 ; 0000 007D             RESULTARRAY[INDEX] = REMAINING;
00011c 81ed      	LDD  R30,Y+5
00011d 81fe      	LDD  R31,Y+5+1
00011e 01de      	MOVW R26,R28
00011f 0fea      	ADD  R30,R26
000120 1ffb      	ADC  R31,R27
000121 81af      	LDD  R26,Y+7
000122 83a0      	STD  Z+0,R26
                 ; 0000 007E 
                 ; 0000 007F             NUM /= 10;
000123 85a9      	LDD  R26,Y+9
000124 85ba      	LDD  R27,Y+9+1
000125 e0ea      	LDI  R30,LOW(10)
000126 e0f0      	LDI  R31,HIGH(10)
000127 940e 0163 	CALL __DIVW21U
000129 87e9      	STD  Y+9,R30
00012a 87fa      	STD  Y+9+1,R31
                 ; 0000 0080 
                 ; 0000 0081             INDEX++;
00012b 81ed      	LDD  R30,Y+5
00012c 81fe      	LDD  R31,Y+5+1
00012d 9631      	ADIW R30,1
00012e 83ed      	STD  Y+5,R30
00012f 83fe      	STD  Y+5+1,R31
                 ; 0000 0082         }
000130 cfdf      	RJMP _0x19
                 _0x1B:
                 ; 0000 0083 
                 ; 0000 0084         if (CNT == 0)
000131 2c04      	MOV  R0,R4
000132 2805      	OR   R0,R5
000133 f421      	BRNE _0x1C
                 ; 0000 0085         {
                 ; 0000 0086             PORTA = 0b01111111;
000134 e7ef      	LDI  R30,LOW(127)
000135 bbeb      	OUT  0x1B,R30
                 ; 0000 0087             PORTC = code[RESULTARRAY[0]];
000136 81e8      	LD   R30,Y
000137 c023      	RJMP _0x26
                 ; 0000 0088         }
                 ; 0000 0089 
                 ; 0000 008A         else if (CNT == 1)
                 _0x1C:
000138 e0e1      	LDI  R30,LOW(1)
000139 e0f0      	LDI  R31,HIGH(1)
00013a 15e4      	CP   R30,R4
00013b 05f5      	CPC  R31,R5
00013c f421      	BRNE _0x1E
                 ; 0000 008B         {
                 ; 0000 008C             PORTA = 0b10111111;
00013d ebef      	LDI  R30,LOW(191)
00013e bbeb      	OUT  0x1B,R30
                 ; 0000 008D             PORTC = code[RESULTARRAY[1]];
00013f 81e9      	LDD  R30,Y+1
000140 c01a      	RJMP _0x26
                 ; 0000 008E         }
                 ; 0000 008F         else if (CNT == 2)
                 _0x1E:
000141 e0e2      	LDI  R30,LOW(2)
000142 e0f0      	LDI  R31,HIGH(2)
000143 15e4      	CP   R30,R4
000144 05f5      	CPC  R31,R5
000145 f421      	BRNE _0x20
                 ; 0000 0090         {
                 ; 0000 0091             PORTA = 0b11110111;
000146 efe7      	LDI  R30,LOW(247)
000147 bbeb      	OUT  0x1B,R30
                 ; 0000 0092             PORTC = code[RESULTARRAY[2]];
000148 81ea      	LDD  R30,Y+2
000149 c011      	RJMP _0x26
                 ; 0000 0093         }
                 ; 0000 0094         else if (CNT == 3)
                 _0x20:
00014a e0e3      	LDI  R30,LOW(3)
00014b e0f0      	LDI  R31,HIGH(3)
00014c 15e4      	CP   R30,R4
00014d 05f5      	CPC  R31,R5
00014e f421      	BRNE _0x22
                 ; 0000 0095         {
                 ; 0000 0096             PORTA = 0b11111011;
00014f efeb      	LDI  R30,LOW(251)
000150 bbeb      	OUT  0x1B,R30
                 ; 0000 0097             PORTC = code[RESULTARRAY[3]];
000151 81eb      	LDD  R30,Y+3
000152 c008      	RJMP _0x26
                 ; 0000 0098         }
                 ; 0000 0099         else if (CNT == 4)
                 _0x22:
000153 e0e4      	LDI  R30,LOW(4)
000154 e0f0      	LDI  R31,HIGH(4)
000155 15e4      	CP   R30,R4
000156 05f5      	CPC  R31,R5
000157 f441      	BRNE _0x24
                 ; 0000 009A         {
                 ; 0000 009B             PORTA = 0b11111101;
000158 efed      	LDI  R30,LOW(253)
000159 bbeb      	OUT  0x1B,R30
                 ; 0000 009C             PORTC = code[RESULTARRAY[4]];
00015a 81ec      	LDD  R30,Y+4
                 _0x26:
00015b e0f0      	LDI  R31,0
00015c 5ae0      	SUBI R30,LOW(-_code)
00015d 4ffd      	SBCI R31,HIGH(-_code)
00015e 81e0      	LD   R30,Z
00015f bbe5      	OUT  0x15,R30
                 ; 0000 009D         }
                 ; 0000 009E     }
                 _0x24:
000160 962b      	ADIW R28,11
000161 cf2c      	RJMP _0x5
                 ; 0000 009F }
                 _0x25:
000162 cfff      	RJMP _0x25
                 ; .FEND
                 
                 	.DSEG
                 _code:
000260           	.BYTE 0xA
                 
                 	.CSEG
                 
                 	.CSEG
                 __DIVW21U:
000163 2400      	CLR  R0
000164 2411      	CLR  R1
000165 e190      	LDI  R25,16
                 __DIVW21U1:
000166 0faa      	LSL  R26
000167 1fbb      	ROL  R27
000168 1c00      	ROL  R0
000169 1c11      	ROL  R1
00016a 1a0e      	SUB  R0,R30
00016b 0a1f      	SBC  R1,R31
00016c f418      	BRCC __DIVW21U2
00016d 0e0e      	ADD  R0,R30
00016e 1e1f      	ADC  R1,R31
00016f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000170 60a1      	SBR  R26,1
                 __DIVW21U3:
000171 959a      	DEC  R25
000172 f799      	BRNE __DIVW21U1
000173 01fd      	MOVW R30,R26
000174 01d0      	MOVW R26,R0
000175 9508      	RET
                 
                 __MODW21U:
000176 dfec      	RCALL __DIVW21U
000177 01fd      	MOVW R30,R26
000178 9508      	RET
                 
                 __INITLOCB:
                 __INITLOCW:
000179 0fac      	ADD  R26,R28
00017a 1fbd      	ADC  R27,R29
                 __INITLOC0:
00017b 9005      	LPM  R0,Z+
00017c 920d      	ST   X+,R0
00017d 958a      	DEC  R24
00017e f7e1      	BRNE __INITLOC0
00017f 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  13 r1 :   5 r2 :   0 r3 :   0 r4 :   9 r5 :   7 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   9 r25:   4 r26:  16 r27:   8 r28:   5 r29:   2 r30: 135 r31:  71 
x  :   4 y  :  92 z  :  10 
Registers used: 16 out of 35 (45.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   3 
adiw  :   9 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  11 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :   3 
cbi   :   0 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   5 cpi   :   0 cpse  :   0 dec   :   3 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   1 inc   :   0 jmp   :  22 ld    :   5 ldd   :  47 ldi   :  47 
lds   :   0 lpm   :   8 lsl   :   1 lsr   :   0 mov   :   1 movw  :   9 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   0 out   :  24 pop   :   0 push  :   0 rcall :   1 ret   :   3 
reti  :   1 rjmp  :  25 rol   :   3 ror   :   0 sbc   :   1 sbci  :  11 
sbi   :   0 sbic  :  16 sbis  :   0 sbiw  :   5 sbr   :   1 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   7 std   :  39 sts   :   0 sub   :   1 subi  :  11 swap  :   0 
tst   :   0 wdr   :   0 
Instructions used: 38 out of 116 (32.8%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000300    738     30    768   32768   2.3%
[.dseg] 0x000060 0x00026a      0     10     10    2048   0.5%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 3 warnings
