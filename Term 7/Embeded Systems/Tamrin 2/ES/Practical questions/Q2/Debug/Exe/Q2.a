;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/25/2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;#include <delay.h>
;
;// Declare your global variables here
;volatile unsigned int ms_count = 0;
;// Timer 0 output compare interrupt service routine
;interrupt[TIM0_COMP] void timer0_comp_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0021     // Place your code here
; 0000 0022     ms_count++;
;PCODE: $0000000F VOL: 1
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0023 }
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;void delay_1ms()
; 0000 0025 {
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0026     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (1 << WGM01) | (0 << CS02) | (1 << CS01) | (1 << CS00);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0027     TCNT0 = 0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0028     OCR0 = 0xF9;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0029 
; 0000 002A     ms_count = 0;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 1
; 0000 002B     TIMSK |= (1 << OCIE0);
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 002C     while (ms_count == 0)
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 1
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 002D         ;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 002E     TCCR0 = 0;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 002F     TIMSK &= ~(1 << OCIE0);
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0030 }
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;void delay_xms(unsigned int x)
; 0000 0033 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0034     unsigned int i = 0;
; 0000 0035     for (i = 0; i < x; i++)
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;	x -> Y+2
;	i -> R16,R17
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0036     {
; 0000 0037         delay_1ms();
;PCODE: $00000040 VOL: 0
; 0000 0038     }
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0039 }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;void main(void)
; 0000 003B {
;PCODE: $0000004D VOL: 0
; 0000 003C     DDRA = (0 << DDA7) | (0 << DDA6) | (0 << DDA5) | (0 << DDA4) | (0 << DDA3) | (0 << DDA2) | (0 << DDA1) | (1 << DDA0) ...
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 003D     PORTA = (0 << PORTA7) | (0 << PORTA6) | (0 << PORTA5) | (0 << PORTA4) | (0 << PORTA3) | (0 << PORTA2) | (0 << PORTA1 ...
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 003E 
; 0000 003F     // Timer/Counter 0 initialization
; 0000 0040     // Clock source: System Clock
; 0000 0041     // Clock value: 250.000 kHz
; 0000 0042     // Mode: CTC top=OCR0
; 0000 0043     // OC0 output: Disconnected
; 0000 0044     // Timer Period: 1 ms
; 0000 0045     TCCR0 = (0 << WGM00) | (0 << COM01) | (0 << COM00) | (1 << WGM01) | (0 << CS02) | (1 << CS01) | (1 << CS00);
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0046     TCNT0 = 0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0047     OCR0 = 0xF9;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0048 
; 0000 0049 // Global enable interrupts
; 0000 004A #asm("sei")
;PCODE: $00000058 VOL: 0
	sei
;PCODE: $00000059 VOL: 0
; 0000 004B 
; 0000 004C     while (1)
;PCODE: $0000005A VOL: 0
; 0000 004D     {
; 0000 004E         PORTA |= (1 << PORTA0);
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 004F         delay_xms(50);
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0050         PORTA &= ~(1 << PORTA0);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0051         delay_ms(50);
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0052     }
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0053 }
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
