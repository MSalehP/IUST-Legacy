;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/25/2024
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*******************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdbool.h>
;
;// Declare your global variables here
;#define BUTTON_PIN PIND2
;#define LED_PIN PORTB0
;
;bool button_pressed = true;
;
;// External Interrupt 0 service routine
;interrupt[EXT_INT0] void ext_int0_isr(void)
; 0000 0024 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025     delay_ms(5);
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0026     if (!(PIND & (1 << BUTTON_PIN)))
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0027     {
; 0000 0028         button_pressed = !button_pressed;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0029     }
; 0000 002A }
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;
;void main(void)
; 0000 002D {
;PCODE: $0000001C VOL: 0
; 0000 002E 
; 0000 002F     DDRB = (0 << DDB7) | (0 << DDB6) | (0 << DDB5) | (0 << DDB4) | (0 << DDB3) | (0 << DDB2) | (0 << DDB1) | (1 << DDB0) ...
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0030     PORTB = (0 << PORTB7) | (0 << PORTB6) | (0 << PORTB5) | (0 << PORTB4) | (0 << PORTB3) | (0 << PORTB2) | (0 << PORTB1 ...
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0031 
; 0000 0032     DDRD = (0 << DDD7) | (0 << DDD6) | (0 << DDD5) | (0 << DDD4) | (0 << DDD3) | (0 << DDD2) | (0 << DDD1) | (0 << DDD0) ...
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0033     PORTD = (0 << PORTD7) | (0 << PORTD6) | (0 << PORTD5) | (0 << PORTD4) | (0 << PORTD3) | (1 << PORTD2) | (0 << PORTD1 ...
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0034 
; 0000 0035     // External Interrupt(s) initialization
; 0000 0036     // INT0: On
; 0000 0037     // INT0 Mode: Falling Edge
; 0000 0038     // INT1: Off
; 0000 0039     // INT2: Off
; 0000 003A     GICR |= (0 << INT1) | (1 << INT0) | (0 << INT2);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 003B     MCUCR = (0 << ISC11) | (0 << ISC10) | (1 << ISC01) | (0 << ISC00);
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 003C     MCUCSR = (0 << ISC2);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 003D     GIFR = (0 << INTF1) | (1 << INTF0) | (0 << INTF2);
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003E 
; 0000 003F // Global enable interrupts
; 0000 0040 #asm("sei")
;PCODE: $0000002E VOL: 0
	sei
;PCODE: $0000002F VOL: 0
; 0000 0041     PORTB &= ~(1 << LED_PIN);
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0042     while (1)
;PCODE: $00000032 VOL: 0
; 0000 0043     {
; 0000 0044         // Place your code here
; 0000 0045         if (button_pressed)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0046         {
; 0000 0047             PORTB |= (1 << LED_PIN);
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0048         }
; 0000 0049         else
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 004A         {
; 0000 004B             PORTB &= ~(1 << LED_PIN);
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004C         }
;PCODE: $0000003B VOL: 0
; 0000 004D     }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004E }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
